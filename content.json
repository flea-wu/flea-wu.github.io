{"meta":{"title":"五百匹跳蚤","subtitle":"Welcome to flea-wu'blog","description":"五百匹跳蚤，blog","author":"tiaozao","url":"http://www.wzzzzzz.com","root":"/"},"pages":[{"title":"404","date":"2020-11-08T06:53:44.000Z","updated":"2020-11-08T06:55:16.000Z","comments":true,"path":"404.html","permalink":"http://www.wzzzzzz.com/404.html","excerpt":"","text":""},{"title":"categories","date":"2020-11-08T06:50:54.000Z","updated":"2020-11-08T06:51:17.000Z","comments":true,"path":"categories/index.html","permalink":"http://www.wzzzzzz.com/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2020-11-08T06:52:35.000Z","updated":"2020-11-08T06:52:56.000Z","comments":true,"path":"about/index.html","permalink":"http://www.wzzzzzz.com/about/index.html","excerpt":"","text":""},{"title":"contact","date":"2020-11-08T06:53:10.000Z","updated":"2020-11-08T06:53:27.000Z","comments":true,"path":"contact/index.html","permalink":"http://www.wzzzzzz.com/contact/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-11-08T06:51:46.000Z","updated":"2020-11-08T06:52:03.000Z","comments":true,"path":"tags/index.html","permalink":"http://www.wzzzzzz.com/tags/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2023-09-03T14:41:07.575Z","updated":"2023-09-03T03:10:28.702Z","comments":false,"path":"repository/index.html","permalink":"http://www.wzzzzzz.com/repository/index.html","excerpt":"","text":""},{"title":"friends","date":"2020-11-08T06:53:44.000Z","updated":"2020-11-08T06:54:01.000Z","comments":true,"path":"friends/index.html","permalink":"http://www.wzzzzzz.com/friends/index.html","excerpt":"","text":""},{"title":"Archives","date":"2017-09-20T12:49:56.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"archive/index.html","permalink":"http://www.wzzzzzz.com/archive/index.html","excerpt":"","text":""}],"posts":[{"title":"Docker 相关命令小计","slug":"2021-02-18-Docker-相关命令小计","date":"2021-02-18T05:53:56.000Z","updated":"2021-02-18T05:56:36.000Z","comments":true,"path":"docker/2021-02-18-docker-xiang-guan-ming-ling-xiao-ji/","link":"","permalink":"http://www.wzzzzzz.com/docker/2021-02-18-docker-xiang-guan-ming-ling-xiao-ji/","excerpt":"","text":"Docker 相关命令小计 docker network ls 查看创建的网络组 docker volume ls 查看创建的数据卷 docker volume rm xxx 删除数据卷 docker rm -v webapp docker rm 删除容器的命令中，我们可以通过增加 -v 选项来删除容器关联的数据卷 如果我们没有随容器删除这些数据卷，Docker 在创建新的容器时也不会启用它们，即使它们与新创建容器所定义的数据卷有完全一致的特征。也就是说，此时它们已经变成了孤魂野鬼，纯粹的占用着硬盘空间而又不受管理。 docker volume prune 删除那些没有被容器引用的数据卷。 docker commit 将容器打成镜像 docker save / docker export 镜像的导出 docker load / docker import 镜像的导入","categories":[{"name":"docker","slug":"docker","permalink":"http://www.wzzzzzz.com/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://www.wzzzzzz.com/tags/docker/"}],"author":"tiaozao"},{"title":"Sublime 写Java","slug":"2021-02-17-Sublime-写Java","date":"2021-02-17T05:53:56.000Z","updated":"2021-02-18T06:10:38.000Z","comments":true,"path":"sublime/2021-02-17-sublime-xie-java/","link":"","permalink":"http://www.wzzzzzz.com/sublime/2021-02-17-sublime-xie-java/","excerpt":"","text":"Sublime 写 Java 1.安装JDK 官网下载，下载好后直接安装就可以了。 2.新建java编译系统 sublime工具中选择新建编译系统，配置文件内容如下 { \"shell_cmd\": \"javac -encoding utf-8 $file_name && java $file_base_name\", \"file_regex\": \"^ *\\\\[javac\\\\] (.+):([0-9]+):() (.*)$\", \"selector\": \"source.java\", \"encoding\": \"utf-8\" } 保存为 myJava.sublime-build 3.测试 编写一个java文件，选择编译系统myJava，command+b编译运行 public class hello { public static void main(String args[]){ System.out.println(\"Hello Java 测试中文\"); } } https://docle.github.io/2017/11/11/Compile-and-run-the-Java-program-in-Sublime-Text-3/","categories":[{"name":"Sublime","slug":"Sublime","permalink":"http://www.wzzzzzz.com/categories/Sublime/"}],"tags":[{"name":"Sublime","slug":"Sublime","permalink":"http://www.wzzzzzz.com/tags/Sublime/"}],"author":"tiaozao"},{"title":"Java 锁总结","slug":"2020-12-20-Java-锁总结","date":"2020-12-20T15:42:41.000Z","updated":"2020-12-20T16:17:11.000Z","comments":true,"path":"suo/2020-12-20-java-suo-zong-jie/","link":"","permalink":"http://www.wzzzzzz.com/suo/2020-12-20-java-suo-zong-jie/","excerpt":"","text":"Java 锁总结 1.什么是悲观锁： 在多线程操作共享资源时，一次只能一个线程访问，从源头解决线程并发带来的错误影响 例子：A 写的时候，B不能读和写 实现方式： synchronize 关键字或 ReentrantLock reentrantLock = new ReentrantLock(false); 2.什么是乐观锁： 在多线程操作共享资源时，可以有多个线程访问，操作共享资源时再进行判断，再进行错误兼容 例子：A 写的时候，B能读；B 写的时候，发现 A 已经写了，或者 A 写的时候，发现 B 已经写了，报错或者其他异常逻辑 实现方式： 一般用 CAS 和 版本控制来实现 什么是 CAS 全称 Compare and swap，字面意思:”比较并交换“ 例子： 我们假设内存中的共享变量原数据 A：a = 1，旧的预期值 V：a = 1，需要修改的新值 a = 2。 由于 A 操作是可以被其他线程所影响的，若 A 操作被其他线程锁影响，将 a 的值改成非 1 ，则 Compare 失败，无法更新 比较 A 与 V 是否相等。（比较） 如果比较相等，将 B 写入 V。（交换） 返回操作是否成功。 CAS 有什么优缺点 用户态，系统态 3.什么是自旋锁 4.什么是自适应自旋锁 5.无锁 6.偏向锁 7.轻量级锁 8.重量级锁 9.公平锁 10.非公平锁 11.可重入锁 12.非可重入锁 13.独享锁 14.共享锁 15.分段锁","categories":[{"name":"锁","slug":"锁","permalink":"http://www.wzzzzzz.com/categories/锁/"}],"tags":[{"name":"并发","slug":"并发","permalink":"http://www.wzzzzzz.com/tags/并发/"},{"name":"多线程","slug":"多线程","permalink":"http://www.wzzzzzz.com/tags/多线程/"}],"author":"tiaozao"},{"title":"Springboot 整合 knife4j","slug":"2020-12-12-Springboot-整合-knife4j","date":"2020-12-12T07:33:54.000Z","updated":"2020-12-17T06:00:14.000Z","comments":true,"path":"springboot/knife4j/2020-12-12-springboot-zheng-he-knife4j/","link":"","permalink":"http://www.wzzzzzz.com/springboot/knife4j/2020-12-12-springboot-zheng-he-knife4j/","excerpt":"","text":"Springboot 整合 knife4j","categories":[{"name":"Springboot","slug":"Springboot","permalink":"http://www.wzzzzzz.com/categories/Springboot/"},{"name":"knife4j","slug":"Springboot/knife4j","permalink":"http://www.wzzzzzz.com/categories/Springboot/knife4j/"}],"tags":[{"name":"接口文档","slug":"接口文档","permalink":"http://www.wzzzzzz.com/tags/接口文档/"}],"author":"tiaozao"},{"title":"使用阿里云做代理服务器","slug":"2020-12-03-使用阿里云做代理服务器","date":"2020-12-02T16:22:06.000Z","updated":"2020-12-12T07:17:47.000Z","comments":true,"path":"zhua-bao/dai-li/2020-12-03-shi-yong-a-li-yun-zuo-dai-li-fu-wu-qi/","link":"","permalink":"http://www.wzzzzzz.com/zhua-bao/dai-li/2020-12-03-shi-yong-a-li-yun-zuo-dai-li-fu-wu-qi/","excerpt":"","text":"使用阿里云做代理服务器 有情怀，有干货，微信搜索【槑克码宁】关注这个不一样的程序员。 前言 众所周知想要抓包，就得挂代理 ip ，获取代理 ip 的途径有很多。如第三方的服务商：快代理、芝麻、精灵等。网上能找的代理 ip 都有一个缺点：都有时长限制；我只想偶尔挂个代理测试抓取某个接口，该如何做？ 使用阿里云服务器做代理服务器 买一台阿里云服务器 xxx 安装（代理软件：TinyProxy 和 Squid 都是比较优秀的代理软件） 安装 TinyProxy yum install tinyproxy 配置 TinyProxy 1. 打开配置文件 vim /etc/tinyproxy/tinyproxy.conf 2. 修改 Port 端口，默认为 8888 Port 8888 3. 注释掉 Allow，表示允许所有人访问代理 #Allow 127.0.0.1 4. 隐藏掉Via请求头部，去掉下面的注释 DisableViaHeader Yes 启动 TinyProxy systemctl start tinyproxy.service 更多配置 1.启动 service tinyproxy start service tinyproxy stop service tinyproxy restart 2.启动 systemctl tinyproxy start systemctl tinyproxy.start start systemctl tinyproxy.service start 3.启动 /bin/systemctl start tinyproxy.service 1、2、3 都尝试下；不同环境启动的不一样 在阿里云安全组中开放 8888 端口 测试是否成功 测试教程参见：Postman 配置代理","categories":[{"name":"抓包","slug":"抓包","permalink":"http://www.wzzzzzz.com/categories/抓包/"},{"name":"代理","slug":"抓包/代理","permalink":"http://www.wzzzzzz.com/categories/抓包/代理/"}],"tags":[{"name":"代理","slug":"代理","permalink":"http://www.wzzzzzz.com/tags/代理/"}],"author":"tiaozao"},{"title":"Postman 配置代理","slug":"2020-12-01-Postman-配置代理","date":"2020-12-01T14:36:32.000Z","updated":"2020-12-12T07:22:10.000Z","comments":true,"path":"zhua-bao/dai-li/2020-12-01-postman-pei-zhi-dai-li/","link":"","permalink":"http://www.wzzzzzz.com/zhua-bao/dai-li/2020-12-01-postman-pei-zhi-dai-li/","excerpt":"","text":"Postman 配置代理 1.使用快捷键 command + d 打开设置页面 2.选择 proxy 进行如下图设置 3.检验是否安装成功，访问 ipip.net 查看自己的 ip","categories":[{"name":"抓包","slug":"抓包","permalink":"http://www.wzzzzzz.com/categories/抓包/"},{"name":"代理","slug":"抓包/代理","permalink":"http://www.wzzzzzz.com/categories/抓包/代理/"}],"tags":[{"name":"代理","slug":"代理","permalink":"http://www.wzzzzzz.com/tags/代理/"}],"author":"tiaozao"},{"title":"Idea 开发配置代理","slug":"2020-12-01-Idea-开发配置代理","date":"2020-12-01T14:18:41.000Z","updated":"2023-09-04T14:35:17.025Z","comments":true,"path":"zhua-bao/2020-12-01-idea-kai-fa-pei-zhi-dai-li/","link":"","permalink":"http://www.wzzzzzz.com/zhua-bao/2020-12-01-idea-kai-fa-pei-zhi-dai-li/","excerpt":"","text":"Idea 开发配置代理 起因 因为本猿在开发代码中，遇到一个问题：在抓取第三方接口时，本地测试 OK 到生产环境中却不行，代码都是一份，但线上环境却不能正常使用，怀疑是线上是服务器 ip ，线上服务器 ip 会被识别，故想将本地环境模拟成线上环境发请求。 配置 1.打开 idea 设置，快捷键（command + ,） 2.在输入框中输入 proxy","categories":[{"name":"抓包","slug":"抓包","permalink":"http://www.wzzzzzz.com/categories/抓包/"}],"tags":[{"name":"代理","slug":"代理","permalink":"http://www.wzzzzzz.com/tags/代理/"}],"author":"tiaozao"},{"title":"Mybatis 初始化流程","slug":"2020-12-01-Mybatis-初始化流程","date":"2020-12-01T13:53:27.000Z","updated":"2020-12-01T14:12:19.000Z","comments":true,"path":"yuan-ma/mybatis/2020-12-01-mybatis-chu-shi-hua-liu-cheng/","link":"","permalink":"http://www.wzzzzzz.com/yuan-ma/mybatis/2020-12-01-mybatis-chu-shi-hua-liu-cheng/","excerpt":"","text":"Mybatis 初始化流程 加载数据源 接收一个 DataSource 实例 创建 SqlSessionFactoryBean 实例对象 SqlSessionFactory 是一个接口，默认有两个实例： public interface SqlSessionFactory { SqlSession openSession(); SqlSession openSession(boolean autoCommit); SqlSession openSession(Connection connection); SqlSession openSession(TransactionIsolationLevel level); SqlSession openSession(ExecutorType execType); SqlSession openSession(ExecutorType execType, boolean autoCommit); SqlSession openSession(ExecutorType execType, TransactionIsolationLevel level); SqlSession openSession(ExecutorType execType, Connection connection); Configuration getConfiguration(); } 默认的两个实例： SqlSessionFactory 的作用是创建会话(SqlSession)，相当于 JDBC 的 Connection 连接； SqlSession sqlSession = null; try{ sqlSesssion = sqlSessionFactory.openSesson(); // And code you need；可以自定义业务代码 sqlSession.commit(); } catch(Exception e) { e.printStackTrace(); } finally { if(sqlSession != null){ sqlSession.close(); } } 实例： 加载配置文件： String resource = \"mybatis-config.xml\"; InputStream inputStream = Resource.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = null; 使用 SqlSessionFactoryBuilder 创建 SqlSessionFactory 的一个实例 sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputstream);","categories":[{"name":"源码","slug":"源码","permalink":"http://www.wzzzzzz.com/categories/源码/"},{"name":"Mybatis","slug":"源码/Mybatis","permalink":"http://www.wzzzzzz.com/categories/源码/Mybatis/"}],"tags":[{"name":"Mybatis","slug":"Mybatis","permalink":"http://www.wzzzzzz.com/tags/Mybatis/"}],"author":"tiaozao"},{"title":"Spring ApplicationListener 作用","slug":"2020-12-01-Spring-ApplicationListener-作用","date":"2020-12-01T13:50:14.000Z","updated":"2020-12-01T13:52:22.000Z","comments":true,"path":"yuan-ma/spring/2020-12-01-spring-applicationlistener-zuo-yong/","link":"","permalink":"http://www.wzzzzzz.com/yuan-ma/spring/2020-12-01-spring-applicationlistener-zuo-yong/","excerpt":"","text":"Spring ApplicationListener 作用 使用场景 在一些业务场景中，当容器初始化完成之后，需要处理一些操作，比如一些数据的加载、初始化缓存、特定任务的注册等等。这个时候我们就可以使用Spring提供的ApplicationListener来进行操作 public class ApplicationStartListener implements ApplicationListener{ @Override public void onApplicationEvent(ContextRefreshedEvent contextRefreshedEvent) { System.out.println(\"我的父容器为：\" + contextRefreshedEvent.getApplicationContext().getParent()); System.out.println(\"初始化时我被调用了。\"); } } @Configuration public class ListenerConfig { @Bean public ApplicationStartListener applicationStartListener(){ return new ApplicationStartListener(); } } 为啥不直接在ApplicationStartListener类上面加@Component注解? ​ 通过配置类ListenerConfig 可以更加直观的去管理项目中已有监听器，对于后面代码维护者更友好","categories":[{"name":"源码","slug":"源码","permalink":"http://www.wzzzzzz.com/categories/源码/"},{"name":"Spring","slug":"源码/Spring","permalink":"http://www.wzzzzzz.com/categories/源码/Spring/"}],"tags":[{"name":"Spring","slug":"Spring","permalink":"http://www.wzzzzzz.com/tags/Spring/"}],"author":"tiaozao"},{"title":"notify和notifyAll区别","slug":"2020-11-28-notify和notifyAll区别","date":"2020-11-28T13:43:17.000Z","updated":"2020-11-28T13:46:03.000Z","comments":true,"path":"java-ji-chu/2020-11-28-notify-he-notifyall-qu-bie/","link":"","permalink":"http://www.wzzzzzz.com/java-ji-chu/2020-11-28-notify-he-notifyall-qu-bie/","excerpt":"","text":"Java 线程 notify和notifyAll区别 从字面上意思来说，notify是唤醒一个处于该对象wait的线程 而notifyAll是唤醒所有处于该对象wait的线程。 但是唤醒不等于就能执行了，需要得到锁对象才能有权利继续执行，而锁只有一把，所以多个线程被唤醒时需要争取该锁。 那你也许会想，既然只有一把锁，那我每次用notify唤醒一个不就行了，这样都省的争了，notifyAll还有存在的意义吗？ 事实并不是这样的，这里我就直接用知乎的回答来阐述这个问题。大家一起学习。 先说两个概念：锁池和等待池 锁池:假设线程A已经拥有了某个对象(注意:不是类)的锁，而其它的线程想要调用这个对象的某个synchronized方法(或者synchronized块)，由于这些线程在进入对象的synchronized方法之前必须先获得该对象的锁的拥有权，但是该对象的锁目前正被线程A拥有，所以这些线程就进入了该对象的锁池中。 等待池:假设一个线程A调用了某个对象的wait()方法，线程A就会释放该对象的锁后，进入到了该对象的等待池中 Reference：java中的锁池和等待池 然后再来说notify和notifyAll的区别 如果线程调用了对象的 wait()方法，那么线程便会处于该对象的等待池中，等待池中的线程不会去竞争该对象的锁。 当有线程调用了对象的 notifyAll()方法（唤醒所有 wait 线程）或 notify()方法（只随机唤醒一个 wait 线程），被唤醒的的线程便会进入该对象的锁池中，锁池中的线程会去竞争该对象锁。也就是说，调用了notify后只要一个线程会由等待池进入锁池，而notifyAll会将该对象等待池内的所有线程移动到锁池中，等待锁竞争 优先级高的线程竞争到对象锁的概率大，假若某线程没有竞争到该对象锁，它还会留在锁池中，唯有线程再次调用 wait()方法，它才会重新回到等待池中。而竞争到对象锁的线程则继续往下执行，直到执行完了 synchronized 代码块，它会释放掉该对象锁，这时锁池中的线程会继续竞争该对象锁。 Reference：线程间协作：wait、notify、notifyAll 综上，所谓唤醒线程，另一种解释可以说是将线程由等待池移动到锁池，notifyAll调用后，会将全部线程由等待池移到锁池，然后参与锁的竞争，竞争成功则继续执行，如果不成功则留在锁池等待锁被释放后再次参与竞争。而notify只会唤醒一个线程。 有了这些理论基础，后面的notify可能会导致死锁，而notifyAll则不会的例子也就好解释了 作者：文龙 链接：https://www.zhihu.com/question/37601861/answer/145545371 notify会产生死锁？可能你无法理解为什么，就用程序来表达吧。 package lock; import java.util.concurrent.TimeUnit; /** * @author Alex Wang * @date 2017/12/15 */ public class TestNotifyAndNotifyAll { public static void main(String[] args) { Object co = new Object(); System.out.println(co); for (int i = 0; i &lt; 5; i++) { MyThread t = new MyThread(\"Thread\" + i, co); t.start(); } try { TimeUnit.SECONDS.sleep(2); System.out.println(\"-----Main Thread notify-----\"); synchronized (co) { co.notify(); } TimeUnit.SECONDS.sleep(2); System.out.println(\"Main Thread is end.\"); } catch (InterruptedException e) { e.printStackTrace(); } } static class MyThread extends Thread { private String name; private Object co; public MyThread(String name, Object o) { this.name = name; this.co = o; } @Override public void run() { System.out.println(name + \" is waiting.\"); try { synchronized (co) { co.wait(); System.out.println(name +\"get lock again\"); } System.out.println(name + \" has been notified.\"); } catch (InterruptedException e) { e.printStackTrace(); } } } } 运行该程序会发生死锁，因为main线程中途只唤醒了一个线程，而当那个线程运行完之后就释放了锁，却没有唤醒其余等待的线程进入锁池竞争锁。所以就 造成了该现象。解决方法就是讲main线程中的notify改为notifyAll或者在MyThread的run方法中在退出同步块之前进行notify() notifyAll should be used most of the time. If you are not sure which to use, then use notifyAll.Please see explanation that follows. 大部分情况下都用notifyAll即可，如果你实在不确定用哪个，那就用notifyAll。 参考: 知乎notify和notifyAll的区别 Google回答 java notify和notifyAll区别","categories":[{"name":"Java基础","slug":"Java基础","permalink":"http://www.wzzzzzz.com/categories/Java基础/"}],"tags":[{"name":"并发","slug":"并发","permalink":"http://www.wzzzzzz.com/tags/并发/"},{"name":"多线程","slug":"多线程","permalink":"http://www.wzzzzzz.com/tags/多线程/"}],"author":"tiaozao"},{"title":"iterm2+oh-my-zsh内容太多时显示不完全","slug":"2020-11-28-iterm2+oh-my-zsh内容太多时显示不完全","date":"2020-11-28T11:53:32.000Z","updated":"2023-09-03T14:43:23.371Z","comments":true,"path":"iterm2/mac/2020-11-28-iterm2-oh-my-zsh-nei-rong-tai-duo-shi-xian-shi-bu-wan-quan/","link":"","permalink":"http://www.wzzzzzz.com/iterm2/mac/2020-11-28-iterm2-oh-my-zsh-nei-rong-tai-duo-shi-xian-shi-bu-wan-quan/","excerpt":"","text":"iterm2+oh-my-zsh内容太多时显示不完全 按 command + , 唤出 iterm2 设置页面 进行如下图设置，修改 Scrollback lines 值 ![设置](/Users/mac/Library/Application Support/typora-user-images/image-20201128200642759.png)","categories":[{"name":"iterm2","slug":"iterm2","permalink":"http://www.wzzzzzz.com/categories/iterm2/"},{"name":"Mac","slug":"iterm2/Mac","permalink":"http://www.wzzzzzz.com/categories/iterm2/Mac/"}],"tags":[{"name":"oh-my-zsh","slug":"oh-my-zsh","permalink":"http://www.wzzzzzz.com/tags/oh-my-zsh/"}],"author":"tiaozao"},{"title":"线程（一）线程通信","slug":"2020-11-28-线程（一）线程通信","date":"2020-11-28T08:34:50.000Z","updated":"2020-11-28T11:51:13.000Z","comments":true,"path":"java-ji-chu/2020-11-28-xian-cheng-yi-xian-cheng-tong-xin/","link":"","permalink":"http://www.wzzzzzz.com/java-ji-chu/2020-11-28-xian-cheng-yi-xian-cheng-tong-xin/","excerpt":"","text":"线程（一）线程通信","categories":[{"name":"Java基础","slug":"Java基础","permalink":"http://www.wzzzzzz.com/categories/Java基础/"}],"tags":[{"name":"并发","slug":"并发","permalink":"http://www.wzzzzzz.com/tags/并发/"},{"name":"多线程","slug":"多线程","permalink":"http://www.wzzzzzz.com/tags/多线程/"}],"author":"tiaozao"},{"title":"Mybatis 源码（一）","slug":"2020-11-27-Mybatis-源码（一）","date":"2020-11-27T14:57:10.000Z","updated":"2023-09-03T14:43:23.367Z","comments":true,"path":"mybatis/2020-11-27-mybatis-yuan-ma-yi/","link":"","permalink":"http://www.wzzzzzz.com/mybatis/2020-11-27-mybatis-yuan-ma-yi/","excerpt":"","text":"Mybatis 源码（一） MapperMethod 有两个内容部类： SqlCommand 是 MapperMethod 的内部类， 主要体现在MapperMethod类的execute()方法里,SqlCommand为其提供了查询类型和方法id两个信息,从而使用Sqlseesion执行不同的方法 MethodSignature 是 MapperMethod 的内部类 MethodSignature为MapperMethod类提供了三个作用,获取待执行方法中的参数和@Param注解标注的参数名,获取标注有@MapKey的参数(@Mapkey作用在后续会讲到),方法的返回类型,获取SELECT操作时必要的标志位。以下是MethodSignature的所有属性。","categories":[{"name":"Mybatis","slug":"Mybatis","permalink":"http://www.wzzzzzz.com/categories/Mybatis/"}],"tags":[{"name":"Mybatis","slug":"Mybatis","permalink":"http://www.wzzzzzz.com/tags/Mybatis/"},{"name":"源码","slug":"源码","permalink":"http://www.wzzzzzz.com/tags/源码/"}],"author":"tiaozao"},{"title":"Spring MVC中的Controller是Serlvet吗？","slug":"2020-11-23-Spring-MVC中的Controller是Serlvet吗？","date":"2020-11-23T13:28:21.000Z","updated":"2023-09-03T14:43:23.372Z","comments":true,"path":"spring/2020-11-23-spring-mvc-zhong-de-controller-shi-serlvet-ma/","link":"","permalink":"http://www.wzzzzzz.com/spring/2020-11-23-spring-mvc-zhong-de-controller-shi-serlvet-ma/","excerpt":"","text":"Spring MVC中的Controller是Serlvet吗？ 不是。 Controller 是一个处理请求的 Java bean 。 DispatcherServlet 是 Spring MVC 中唯一的一个 Servlet ；Servlet容器(Tomcat)把所有请求都转发到DispatcherServlet，然后通过 HandlerMapping 把请求路由到具体的 Controller 中。 DispatcherServlet 由谁创建： DispatcherServlet 的生命周期与普通的 Servlet 一样都是由 Servlet 容器（例如 Tomcat ）管理，在第一次访问时创建，在容器关闭时销毁。显而易见的，DispatcherServlet 实例在 Servlet 容器中，而不是 Spring 自己的 IoC 容器中。","categories":[{"name":"Spring","slug":"Spring","permalink":"http://www.wzzzzzz.com/categories/Spring/"}],"tags":[{"name":"SpringMVC","slug":"SpringMVC","permalink":"http://www.wzzzzzz.com/tags/SpringMVC/"}],"author":"tiaozao"},{"title":"Mysql 自增 id 的问题","slug":"2020-11-23-Mysql-自增-id-的问题","date":"2020-11-23T08:18:50.000Z","updated":"2023-09-03T14:43:23.369Z","comments":true,"path":"mysql/2020-11-23-mysql-zi-zeng-id-de-wen-ti/","link":"","permalink":"http://www.wzzzzzz.com/mysql/2020-11-23-mysql-zi-zeng-id-de-wen-ti/","excerpt":"","text":"Mysql 自增 id 的问题 mysql 自增 id 的问题 先设置id 再删除表（delete 表，不会修改自增，自增值：只会被大于其值所修改） 再设置id 再让id自增 一、 truncate 是 DDL 语句，它不存在所谓的 “事务回滚”； delete 是 DML 语句，它执行完是可以 rollback 的。 二、 truncate table 返回值是 0； delete from table 返回值是被删除的行数。 三、 InnoDB 支持一个表一个文件，此时： truncate 会一次性把表干掉，且不会激活触发器，速度非常快； delete from table 则会一行一行删除，会激活触发器，速度比较慢。 画外音：delete 数据，是要记录日志的，truncate 表不需要记录日志。 四、 当表中有列被其它表作为外键 (foreign key) 时： truncate 会是失败； delete 则会成功。 画外音：这类数据删除失败很容易定位问题，因为报错提示简单易懂。 五、 当表中有自增列是： truncate 会使得自增列计数复原； delete 所有数据后，自增列计数并不会从头开始。 画外音：因此，delete 所有数据后，自增列计数的这个行为，往往不是用户想要的，所以是一个潜在坑。","categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.wzzzzzz.com/categories/Mysql/"}],"tags":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.wzzzzzz.com/tags/Mysql/"}],"author":"tiaozao"},{"title":"进程和线程的关系","slug":"2020-11-22-进程和线程的关系","date":"2020-11-22T13:57:50.000Z","updated":"2023-09-03T16:57:03.281Z","comments":true,"path":"cao-zuo-xi-tong/2020-11-22-jin-cheng-he-xian-cheng-de-guan-xi/","link":"","permalink":"http://www.wzzzzzz.com/cao-zuo-xi-tong/2020-11-22-jin-cheng-he-xian-cheng-de-guan-xi/","excerpt":"","text":"进程、线程、并发 概念 进程 进程是资源分配的最小单位 线程 线程是CPU调度的最小单位 并发 把任务在不同的时间点交给处理器进行处理。在同一时间点，任务并不会同时运行 并行 把每一个任务分配给每一个处理器独立完成。在同一时间点，任务一定是同时运行","categories":[{"name":"操作系统","slug":"操作系统","permalink":"http://www.wzzzzzz.com/categories/操作系统/"}],"tags":[{"name":"进程","slug":"进程","permalink":"http://www.wzzzzzz.com/tags/进程/"},{"name":"线程","slug":"线程","permalink":"http://www.wzzzzzz.com/tags/线程/"},{"name":"并发","slug":"并发","permalink":"http://www.wzzzzzz.com/tags/并发/"}],"author":"tiaozao"},{"title":"Java 数组","slug":"JAVA-数组","date":"2020-11-15T05:38:50.000Z","updated":"2020-11-15T14:06:43.000Z","comments":true,"path":"java-ji-chu/java-shu-zu/","link":"","permalink":"http://www.wzzzzzz.com/java-ji-chu/java-shu-zu/","excerpt":"","text":"Java 数组 Java 中数组是对象，证明： int[] arr = new int[10]; System.out.println(arr); // 输出的结果为：[I@5dfcfece 一个对象的地址 Java 中数组的大小不可变，扩容由拷贝实现 数组初始化的时候可以不指定长度吗？ 可以 int[] arr = new int[] {}; 等价于 int[] arr = new int[0]; 等价于 int[] arr = {}; 大小固定，不能动态扩展(初始化给大了，浪费；给小了，不够用)，插入快，删除和查找慢","categories":[{"name":"Java基础","slug":"Java基础","permalink":"http://www.wzzzzzz.com/categories/Java基础/"}],"tags":[{"name":"数组","slug":"数组","permalink":"http://www.wzzzzzz.com/tags/数组/"}],"author":"tiaozao"},{"title":"Java 为什么不能申明成一个基本数据类型的集合？","slug":"Java 为什么不能申明成一个基本数据类型的集合？","date":"2020-11-14T16:18:35.000Z","updated":"2020-11-14T17:01:07.000Z","comments":true,"path":"java-ji-chu/java-wei-shi-me-bu-neng-shen-ming-cheng-yi-ge-ji-ben-shu-ju-lei-xing-de-ji-he/","link":"","permalink":"http://www.wzzzzzz.com/java-ji-chu/java-wei-shi-me-bu-neng-shen-ming-cheng-yi-ge-ji-ben-shu-ju-lei-xing-de-ji-he/","excerpt":"","text":"Java 为什么不能申明成一个基本数据类型的集合？ 解释1 通过菱形语法（’&lt;&gt;’）可以将集合内元素的类型限定为E类型。 需要注意的是 &lt;&gt; 内的类型只能是引用类型，当然对于基本类型，可以使用对应的包装类型。 解释2 为什么泛型里面数据类型不能是基本类型呢？ 因为虚拟机在编译时会把带泛型的转换成 Object 类型，而基本类型不属于 Object 类型，所以泛型里面数据类型不能是基本类型。 解释3 为什么基本类型不属于Object类型呢？ 基本数据类型可以在栈中进行分配，也可以在堆中分配（基本类型在成员变量和局部（ local ）变量的时候其内存分配机制是不一样的。如果是成员变量，那么不分基本类型和引用类型都是在 java 的堆内存里面分配空间，而局部变量的基本类型是在栈上分配的。栈属于线程私有的空间，局部变量的生命周期和作用域一般都很短，为了提高 gc 效率，所以没必要放在堆里面。）；对象类型在堆中进行分配。 java 不是 100% 的面向对象编程，比如基本数据类型如 int , boolean 等等都不是对象，也就是不能用 new 的方式获取，但是 java 对这些基本数据类型都有解决办法，就是对着一个封装类型，他们的封装类是对象。比如 int 对应着 Integer , boolean 对应着 Boolean ,他们都是为了解决基本数据类型面向对象用的。","categories":[{"name":"Java基础","slug":"Java基础","permalink":"http://www.wzzzzzz.com/categories/Java基础/"}],"tags":[{"name":"基本数据类型","slug":"基本数据类型","permalink":"http://www.wzzzzzz.com/tags/基本数据类型/"},{"name":"集合","slug":"集合","permalink":"http://www.wzzzzzz.com/tags/集合/"}],"author":"tiaozao"},{"title":"Git 保存密码","slug":"Git-保存密码","date":"2020-08-11T16:00:00.000Z","updated":"2020-12-13T06:30:09.000Z","comments":true,"path":"article/git-bao-cun-mi-ma/","link":"","permalink":"http://www.wzzzzzz.com/article/git-bao-cun-mi-ma/","excerpt":"","text":"Git 保存密码 编辑git文件 进入git项目根目录： 1、linux : vi .git/config 于文件末尾添加内容，并保存 [credential] helper = store 拉取或提交过一次代码后，会自动保存密码～","categories":[],"tags":[{"name":"Git","slug":"Git","permalink":"http://www.wzzzzzz.com/tags/Git/"}]},{"title":"Springboot 整合 Redisson","slug":"Springboot-整合-Redisson","date":"2020-07-22T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/springboot-zheng-he-redisson/","link":"","permalink":"http://www.wzzzzzz.com/article/springboot-zheng-he-redisson/","excerpt":"","text":"Springboot 整合 Redisson 1. 添加 Maven 依赖 org.springframework.boot spring-boot-starter-data-redis org.redisson redisson-spring-boot-starter 3.10.6 2. 书写配置文件 redis: host: 127.0.0.1 port: 11328 password: wawaji 3. 书写配置类 @Configuration public class RedissonConfig { @Value(\"${redis.host}\") private String host; @Value(\"${redis.port}\") private String port; @Value(\"${redis.password}\") private String password; @Bean public RedissonClient redissonClient() { Config config = new Config(); //单节点 SingleServerConfig singleServerConfig = config.useSingleServer(); singleServerConfig.setAddress(\"redis://\" + host + \":\" + port); if (StringUtils.isEmpty(password)) { singleServerConfig.setPassword(null); } else { singleServerConfig.setPassword(password); } //添加主从配置 // config.useMasterSlaveServers().setMasterAddress(\"\").setPassword(\"\").addSlaveAddress(new String[]{\"\",\"\"}); // 集群模式配置 setScanInterval()扫描间隔时间，单位是毫秒, //可以用\"rediss://\"来启用SSL连接 // config.useClusterServers().setScanInterval(2000).addNodeAddress(\"redis://127.0.0.1:7000\", \"redis://127.0.0.1:7001\").addNodeAddress(\"redis://127.0.0.1:7002\"); return Redisson.create(config); } } 4. 编写操作方法类 接口： void getRedissonClient() throws IOException; /** * 获取字符串对象 * * @param objectName * @return */ RBucket getRBucket(String objectName); /** * 获取Map对象 * * @param objectName * @return */ RMap getRMap(String objectName); /** * 获取有序集合 * * @param objectName * @return */ RSortedSet getRSortedSet(String objectName); /** * 获取集合 * * @param objectName * @return */ RSet getRSet(String objectName); /** * 获取列表 * * @param objectName * @return */ RList getRList(String objectName); /** * 获取队列 * * @param objectName * @return */ RQueue getRQueue(String objectName); /** * 获取双端队列 * * @param objectName * @return */ RDeque getRDeque(String objectName); /** * 获取锁 * * @param objectName * @return */ RLock getRLock(String objectName); /** * 获取读写锁 * * @param objectName * @return */ RReadWriteLock getRWLock(String objectName); /** * 获取原子数 * * @param objectName * @return */ RAtomicLong getRAtomicLong(String objectName); /** * 获取记数锁 * * @param objectName * @return */ RCountDownLatch getRCountDownLatch(String objectName); /** * 获取消息的Topic * * @param objectName * @return */ RTopic getRTopic(String objectName); 实现类： @Component public class RedisCacheImpl implements RedisCache { @Resource private RedissonClient redissonClient; @Override public void getRedissonClient() throws IOException { Config config = redissonClient.getConfig(); System.out.println(config.toJSON()); } /** * * 获取字符串对象 * * @param objectName * @return */ @Override public RBucket getRBucket(String objectName) { return redissonClient.getBucket(objectName); } /** * 获取Map对象 * * @param objectName * @return */ @Override public RMap getRMap(String objectName) { RMap map = redissonClient.getMap(objectName); return map; } /** * 获取有序集合 * * @param objectName * @return */ @Override public RSortedSet getRSortedSet(String objectName) { RSortedSet sortedSet = redissonClient.getSortedSet(objectName); return sortedSet; } /** * 获取集合 * * @param objectName * @return */ @Override public RSet getRSet(String objectName) { RSet rSet = redissonClient.getSet(objectName); return rSet; } /** * 获取列表 * * @param objectName * @return */ @Override public RList getRList(String objectName) { RList rList = redissonClient.getList(objectName); return rList; } /** * 获取队列 * * @param objectName * @return */ @Override public RQueue getRQueue(String objectName) { RQueue rQueue = redissonClient.getQueue(objectName); return rQueue; } /** * 获取双端队列 * * @param objectName * @return */ @Override public RDeque getRDeque(String objectName) { RDeque rDeque = redissonClient.getDeque(objectName); return rDeque; } /** * 获取锁 * * @param objectName * @return */ @Override public RLock getRLock(String objectName) { RLock rLock = redissonClient.getLock(objectName); return rLock; } /** * 获取读写锁 * * @param objectName * @return */ @Override public RReadWriteLock getRWLock(String objectName) { RReadWriteLock rwlock = redissonClient.getReadWriteLock(objectName); return rwlock; } /** * 获取原子数 * * @param objectName * @return */ @Override public RAtomicLong getRAtomicLong(String objectName) { RAtomicLong rAtomicLong = redissonClient.getAtomicLong(objectName); return rAtomicLong; } /** * 获取记数锁 * * @param objectName * @return */ @Override public RCountDownLatch getRCountDownLatch(String objectName) { RCountDownLatch rCountDownLatch = redissonClient.getCountDownLatch(objectName); return rCountDownLatch; } /** * 获取消息的Topic * * @param objectName * @return */ @Override public RTopic getRTopic(String objectName) { RTopic rTopic = redissonClient.getTopic(objectName); return rTopic; } } 5. 编写测试类 @Resource private RedisCache redisCache; @Test public void testCache() { RBucket k1 = redisCache.getRBucket(\"k1\"); System.out.println(k1.get()); }","categories":[],"tags":[{"name":"Redis","slug":"Redis","permalink":"http://www.wzzzzzz.com/tags/Redis/"},{"name":"缓存","slug":"缓存","permalink":"http://www.wzzzzzz.com/tags/缓存/"}]},{"title":"Content-Type 了解","slug":"Content-Type-了解","date":"2020-07-03T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/content-type-liao-jie/","link":"","permalink":"http://www.wzzzzzz.com/article/content-type-liao-jie/","excerpt":"","text":"Content-Type 了解 Content-Type Content-Type:实体头部用于指示资源的MIME类型。如果未指定 ContentType，默认为text/html 有两种场景： 在请求中 (如POST 或 PUT)，客户端告诉服务器实际发送的数据类型。 在响应中，Content-Type标头告诉客户端实际返回的内容的内容类型。浏览器会在某些情况下进行MIME查找，并不一定遵循此标题的值; 为了防止这种行为，可以将标题 X-Content-Type-Options 设置为 nosniff。 简而言之就是标识资源或者所需资源的MIME类型。 句法如下： Content-Type: text/html; charset=utf-8 Content-Type: multipart/form-data; boundary=something 参数一般media-type、charset、boundary三种。 我们的关注点在于media-type的取值以及其适用场景。 media-type 更多的是作为MIME type( Multipurpose Internet Mail Extensions)出现，即多用途Internet邮件扩展。 其目的是用一种标准化的方式来标识文档的性质和格式。 浏览器通常使用MIME类型（而不是文件扩展名）来确定如何处理文档； 因此服务器设置正确以将正确的MIME类型附加到响应对象的头部是非常重要的。 结构 MIME 组成结构如下： 由类型与子类型两个字符串中间用’/'分隔而组成。不允许空格存在。对大小写不敏感，但传统都是小写。 允许额外参数，如后面所示： type/subtype;parameter=value 其中： type对应通用类目，例如：text，video等。 subtype对应准确的子类，例如text下面细分为plain(纯文本)、html(html源码)、calendar（.ics）文件等。 parameter可选一般是charset或者bundaary等。 Types 类目包括两种类型：独立类型和Multipart类型。 独立类型 独立类型指只代表一个单独的文件或者媒体的类型，表明了对文件的分类。 常见类型和实例如下： text 文本数据包括一些人类可读的内容或者源码。例如：text/plain, text/csv, text/html. application 数据为二进制的一种，例如：application/json,application/octet-stream,application/pdf,application/pkcs8,application/zip. audio 音频或者音乐数据，例如audio/mpeg, audio/vorbis video 视频数据或者文件，例如video/mp4 image 图像或图形数据，包括位图和矢量静止图像以及静止图像格式的动画版本。例如image/gif, image/png, image/jpeg, image/bmp, image/webp, image/x-icon Multipart类型 Multipart类型指明被分为几部分的一种文档的类目，且经常有不同的MIME类型。也可以用来表示属于相同事物的多个且独立的文件，这些独立的文件构成一个复杂的文档。在电子邮件场景中常见。 有两种Multipart类型：message和multipart。 message 一个包括其他信息的消息，常用于下面的场景，例如指明一个邮件包含转发信息或者在多种信息的情况下，允许以chunk的形式发送数据量很大的信息。包括message/rfc822和message/partial multipart 由多个不同MIME类型组件构成的数据，例如 multipart/form-data(使用FormData API生成的数据) 常见类型及使用场景 application类 application/json 随着json这种轻量级的数据交互格式的流行，特别是和脚本交互的便利，使得在前后接口中，越来越多采用json格式。对于http协议来说，最终传输的还是字符。 application/x-www-form-urlencoded 作为表单提交中默认的类型，其表明数据以标准的编码格式被编码为键值对。 数据被编码成以 ‘&amp;’ 分隔的键-值对, 同时以 ‘=’ 分隔键和值. 非字母或数字的字符会被 percent-encoding: 这也就是为什么这种类型不支持二进制数据的原因 (应使用 multipart/form-data 代替). multipart/form-data 一般用于涉及文件的表单提交，用于post请求，其格式如下： Content-Type: multipart/form-data; boundary=aBoundaryString 其中boundary指明了请求体中每部分的分割符(对于multipart的类目，都会存在该字段，以区分请求体中数据的分割)，其请求体中则是对应表单每部分的内容。每部分都会有自己的请求体和相关内容。 application/javascript application/x-javascript text/javascript 对于js文件，常见MIME类型为text/javascript，但是前两种应该会有见到过。三者之间多少还是有点区别的。 传统的js程序对应的MIME类型为text/javascript，其他的还有\"application/x-javascript\"（x前缀表示这是实验性类型）， 因为text/javascript是最常见的类型，所以RFC4329定义了“text/javascript”。不过，js文件实际上并不是真正的文本类型，因此推出了application/javascript类型，不过现行的支持性并不好，所以常常会用application/x-javascript来代替。 application/zip application/gzip zip 对应zip压缩文件，gzip是若干种文件压缩程序的简称，通常指GNU计划的实现，此处的gzip代表GNU zip。 application/http 从类型可以知道，是http请求，但具体用途还是要翻下规范才能找到的。 此类型包含的http请求包含在binary消息体中，在邮件协议传输中需要指明Content-Transfer-Encoding。 multipart类型 multipart一般对应单个消息头对应多个消息体。 常见语法如下: Content-Type: multipart/mixed; boundary=gc0p4Jq0M2Yt08jU534c0p 其中boundary字段是必须的，用于区分消息体中的数据边界，一般是两个’-'的格式作为该端的开头，例如： --gc0p4Jq0M2Yt08jU534c0p 常见的有以下几种类型 multipart/form-data multipart/mixed multipart/alternative 参考 www.ruanyifeng.com/blog/2008/0…","categories":[],"tags":[{"name":"前端","slug":"前端","permalink":"http://www.wzzzzzz.com/tags/前端/"}]},{"title":"Springboot maven-plugin","slug":"Springboot-maven-plugin","date":"2020-06-26T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/springboot-maven-plugin/","link":"","permalink":"http://www.wzzzzzz.com/article/springboot-maven-plugin/","excerpt":"","text":"Springboot maven-plugin &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;!--将本地的jar也打到生成的包中--&gt; &lt;includeSystemScope&gt;true&lt;/includeSystemScope&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;!--mybatis 逆向工具--&gt; &lt;plugin&gt; &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt; &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.3.3&lt;/version&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;springboot&lt;/groupId&gt; &lt;artifactId&gt;common&lt;/artifactId&gt; &lt;version&gt;1.0.0&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; spring-boot-maven-plugin : 要放在主启动类对应的pom下","categories":[],"tags":[{"name":"坑","slug":"坑","permalink":"http://www.wzzzzzz.com/tags/坑/"},{"name":"Springboot","slug":"Springboot","permalink":"http://www.wzzzzzz.com/tags/Springboot/"}]},{"title":"Neo4j整合 Springboot","slug":"Neo4j整合-Springboot","date":"2020-06-25T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/neo4j-zheng-he-springboot/","link":"","permalink":"http://www.wzzzzzz.com/article/neo4j-zheng-he-springboot/","excerpt":"","text":"Neo4j整合 Springboot","categories":[],"tags":[{"name":"Neo4j","slug":"Neo4j","permalink":"http://www.wzzzzzz.com/tags/Neo4j/"},{"name":"图数据库","slug":"图数据库","permalink":"http://www.wzzzzzz.com/tags/图数据库/"}]},{"title":"Springboot 引入外部jar的坑","slug":"Springboot-引入外部jar的坑","date":"2020-06-24T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/springboot-yin-ru-wai-bu-jar-de-keng/","link":"","permalink":"http://www.wzzzzzz.com/article/springboot-yin-ru-wai-bu-jar-de-keng/","excerpt":"","text":"Springboot 引入外部jar的坑 前言:由于项目需求，短信验证码的接口需要换成阿里大于的，但是尴尬的发现阿里大于的jar包没有maven版本的，于是便开始了一上午的操蛋引包之路。按照套路来说，自然应该是百度一波，但是百度了好久，找了好多方案之后发现，没一个有用的，而且文章的抄袭、拷贝十分严重，试了N种方案，都是错的，都没有将外部jar包打包到BOOK-INF文件夹下。最终，在第N次尝试之后，终于在打的jar包里将外部的jar包导入进来。特此记录下，防止再犯！！！ 首先在新建libs文件夹（根目录或者resource目录下都可以），将需要引入的jar放进去 然后再pom中加入如下配置，告诉maven导入本地jar &lt;dependency&gt; &lt;groupId&gt;com.aliyun&lt;/groupId&gt; &lt;artifactId&gt;aliyun-java-sdk-core&lt;/artifactId&gt; &lt;version&gt;3.2.2&lt;/version&gt; &lt;scope&gt;system&lt;/scope&gt; &lt;systemPath&gt;${project.basedir}/libs/aliyun-java-sdk-core-3.3.1.jar&lt;/systemPath&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.aliyun&lt;/groupId&gt; &lt;artifactId&gt;aliyun-java-sdk-dysmsapi&lt;/artifactId&gt; &lt;version&gt;1.0.0&lt;/version&gt; &lt;scope&gt;system&lt;/scope&gt; &lt;systemPath&gt;${project.basedir}/libs/aliyun-java-sdk-dysmsapi-1.0.0.jar&lt;/systemPath&gt; &lt;/dependency&gt; 复制代码 其中除了systemPath配置告诉maven引入的本地jar包的位置之外，其他的配置都可以随便写 划重点！！！敲黑板！！！下面的一步配置也是最重要的一步，网上很多的教程缺了这样一步之后就会导致虽然本地可以运行，但是只要使用maven打包就不行，因为maven没有将本地的jar也打到生成的包中 在pom中给spring boot的打包插件设置一下includeSystemScope参数即可 &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;includeSystemScope&gt;true&lt;/includeSystemScope&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;","categories":[],"tags":[{"name":"坑","slug":"坑","permalink":"http://www.wzzzzzz.com/tags/坑/"},{"name":"Springboot","slug":"Springboot","permalink":"http://www.wzzzzzz.com/tags/Springboot/"}]},{"title":"性能测试工具 wrk","slug":"性能测试工具-wrk","date":"2020-06-03T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/xing-neng-ce-shi-gong-ju-wrk/","link":"","permalink":"http://www.wzzzzzz.com/article/xing-neng-ce-shi-gong-ju-wrk/","excerpt":"","text":"性能测试工具 wrk MacOS 安装 Mac 系统也可以通过先编译的方式来安装，但是更推荐使用 brew 的方式来安装, 步骤如下： 安装 Homebrew，安装方式参考官网 https://brew.sh （也就一行命令的事）; 安装 wrk: brew install wrk; 验证一下，是否安装成功 wrk -v 出现如图所示安装成功 简单使用 wrk -t12 -c400 -d30s http://www.baidu.com 这条命令表示，利用 wrk 对 www.baidu.com 发起压力测试，线程数为 12，模拟 400 个并发请求，持续 30 秒","categories":[],"tags":[{"name":"wrk","slug":"wrk","permalink":"http://www.wzzzzzz.com/tags/wrk/"},{"name":"工具","slug":"工具","permalink":"http://www.wzzzzzz.com/tags/工具/"}]},{"title":"从0开始搭建自己的个人博客","slug":"从0开始搭建自己的个人博客","date":"2020-05-29T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/cong-0-kai-shi-da-jian-zi-ji-de-ge-ren-bo-ke/","link":"","permalink":"http://www.wzzzzzz.com/article/cong-0-kai-shi-da-jian-zi-ji-de-ge-ren-bo-ke/","excerpt":"","text":"从0开始搭建自己的个人博客 第一步首先下载安装 nodejs https://nodejs.org/zh-cn/ 成功标志：node -v 有版本号 ​ npm -v 有版本号 git 也需要 由于 npm 包管理下载的速度有点慢，则需要切换成 阿里的cnpm npm install -g cnpm --registry=https://registry.npm.tao.org/ ok 后就可以使用 cnpm 安装hexo cnpm install -g hexo-cli 成功标志 hexo -v 搭建 创建一个 blog 的文件夹 进入这个文件夹使用命令行 hexo init 会自动去克隆一个主题 启动 hexo -s 浏览器访问：localhost:4000 新建一篇文章 hexo n “文件名称” 文章会出现在…\\blog\\source_posts 目录下 编辑文件 hexo -g 会生成文章 部署到 GitHub 上，使用GitHub page 在 GitHub 上新建一个仓库，仓库的名称为你的 github 的昵称 在刚刚的 blog 目录下安装一个 git 插件 cnpm install --save hexo-deployer-git cnpm install hexo-deployer-git --save 打开 _config.yml 配置相关配置 在文件的最下面 添加 type：git ​ repo：仓库地址 branch：master hexo -d github账号 github密码 hexo 换主题 git clone 别人的主题 到 themes 目录中 修改 _config.yml 文件 把theme：修改成刚刚克隆下来的文件名 hexo -d 重新推到远端去","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://www.wzzzzzz.com/tags/Hexo/"}]},{"title":"Go 换源","slug":"Go 换源","date":"2020-05-24T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/go-huan-yuan/","link":"","permalink":"http://www.wzzzzzz.com/article/go-huan-yuan/","excerpt":"","text":"Goproxy 中国 中国最可靠的 Go 模块代理。 Goproxy 中国完全实现了 Go 的模块代理协议。并且它是一个由中国备受信赖的云服务提供商七牛云支持的非营利性项目。我们的目标是为中国和世界上其他地方的 Gopher 们提供一个免费的、可靠的、持续在线的且经过 CDN 加速的模块代理。请在 status.goproxy.cn 订阅我们的有关系统性能的实时和历史数据。 请注意，Goproxy 中国只专注于服务在 https://goproxy.cn 的 Web 应用本身的开发。如果你正在寻找一种极其简单的方法来搭建你自己的 Go 模块代理，那么你应该看一下 Goproxy，Goproxy 中国就是基于它开发的。 愉快地编码吧，Gopher 们！;-) 注意，为了帮助 Gopher 们更好地去使用 Go 模块，Goproxy 中国现在支持回答和 Go 模块相关的所有问题（不再只是和 Go 模块代理相关的），你只需要遵循 Issue 模版将问题发表在这里即可。别忘了先去检查我们的常见问题页面中是否已经有了你想要询问的问题。 用法 Go 1.13 及以上（推荐） 打开你的终端并执行 $ go env -w GO111MODULE=on $ go env -w GOPROXY=https://goproxy.cn,direct 完成。 macOS 或 Linux 打开你的终端并执行 $ export GO111MODULE=on $ export GOPROXY=https://goproxy.cn 或者 $ echo \"export GO111MODULE=on\" &gt;&gt; ~/.profile $ echo \"export GOPROXY=https://goproxy.cn\" &gt;&gt; ~/.profile $ source ~/.profile 完成。 Windows 打开你的 PowerShell 并执行 C:\\&gt; $env:GO111MODULE = \"on\" C:\\&gt; $env:GOPROXY = \"https://goproxy.cn\" 或者 1. 打开“开始”并搜索“env” 2. 选择“编辑系统环境变量” 3. 点击“环境变量…”按钮 4. 在“&lt;你的用户名&gt; 的用户变量”章节下（上半部分） 5. 点击“新建…”按钮 6. 选择“变量名”输入框并输入“GO111MODULE” 7. 选择“变量值”输入框并输入“on” 8. 点击“确定”按钮 9. 点击“新建…”按钮 10. 选择“变量名”输入框并输入“GOPROXY” 11. 选择“变量值”输入框并输入“https://goproxy.cn” 12. 点击“确定”按钮 完成。","categories":[],"tags":[{"name":"Go","slug":"Go","permalink":"http://www.wzzzzzz.com/tags/Go/"}]},{"title":"Gin——快速入门","slug":"Gin——快速入门","date":"2020-05-23T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/gin-kuai-su-ru-men/","link":"","permalink":"http://www.wzzzzzz.com/article/gin-kuai-su-ru-men/","excerpt":"","text":"Gin——快速入门 通过 govendor（管理包依赖工具) 来安装 Gin go get github.com/kardianos/govendor cd /usr/local/go/path（第三方依赖包，会默认安装在GOPATH的第一个目录下） 把 govendor 配置到加入环境变量中 配置环境变量的方式 直接移动文件的方式： mv /usr/local/go/path/bin/govendor /usr/local/go/bin/ #govendor -version $ v1.0.9 安装Gin go get -u github.com/gin-gonic/gin","categories":[],"tags":[{"name":"Gin","slug":"Gin","permalink":"http://www.wzzzzzz.com/tags/Gin/"}]},{"title":"Mac 开发软件","slug":"Mac-开发软件","date":"2020-05-23T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/mac-kai-fa-ruan-jian/","link":"","permalink":"http://www.wzzzzzz.com/article/mac-kai-fa-ruan-jian/","excerpt":"","text":"Mac 开发软件 隐藏 macOS 状态栏图标的工具，使状态栏看起来更整洁 https://github.com/Mortennn/Dozer","categories":[],"tags":[{"name":"mac","slug":"mac","permalink":"http://www.wzzzzzz.com/tags/mac/"}]},{"title":"Neo4j学习 环境搭建","slug":"Neo4j学习-环境搭建","date":"2020-05-23T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/neo4j-xue-xi-huan-jing-da-jian/","link":"","permalink":"http://www.wzzzzzz.com/article/neo4j-xue-xi-huan-jing-da-jian/","excerpt":"","text":"Neo4j学习 环境搭建 安装 docker docker 拉取 neo4j 最新镜像 docker pull neo4j docker run docker run \\ -it -d\\ --publish=7474:7474 --publish=7687:7687 \\ --volume=$HOME/neo4j/data:/data \\ --volume=$HOME/neo4j/logs:/logs \\ --volume=$HOME/neo4j/conf:/var/lib/neo4j/conf \\ --volume=$HOME/neo4j/plugins:/var/lib/neo4j/plugins \\ neo4j:latest 访问 http://127.0.0.1:7474 输入账号密码，默认 neo4j neo4j 改：neo4j , 名字","categories":[],"tags":[{"name":"Neo4j","slug":"Neo4j","permalink":"http://www.wzzzzzz.com/tags/Neo4j/"},{"name":"图数据库","slug":"图数据库","permalink":"http://www.wzzzzzz.com/tags/图数据库/"}]},{"title":"Liunx 批量执行curl命令","slug":"Liunx-批量执行curl命令","date":"2020-05-16T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/liunx-pi-liang-zhi-xing-curl-ming-ling/","link":"","permalink":"http://www.wzzzzzz.com/article/liunx-pi-liang-zhi-xing-curl-ming-ling/","excerpt":"","text":"Liunx 批量执行curl命令 一些url https://girl.nbjike.com/ http://nuxt.nbjike.com/ ... 创建一个存储 url 的文件 vim url.txt 将相关 url 保存进 url.txt 中 终端执行以下命令 for URL in `cat url.txt`; do echo $URL; curl -m 10 -s -I $1 \"$URL\" | grep HTTP/1.1 | awk {'print $2'}; done","categories":[],"tags":[{"name":"Liunx 相关命令操作","slug":"Liunx-相关命令操作","permalink":"http://www.wzzzzzz.com/tags/Liunx-相关命令操作/"}]},{"title":"Nuxt asyncData() 方法详解","slug":"Nuxt-asyncData()-方法详解","date":"2020-05-16T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/nuxt-asyncdata-fang-fa-xiang-jie/","link":"","permalink":"http://www.wzzzzzz.com/article/nuxt-asyncdata-fang-fa-xiang-jie/","excerpt":"","text":"Nuxt asyncData() 方法详解 细节一： ​ 异步数据 （asyncData方法，限于page页面组件，components中不适用） 细节二：","categories":[],"tags":[{"name":"Nuxt","slug":"Nuxt","permalink":"http://www.wzzzzzz.com/tags/Nuxt/"}]},{"title":"Nuxt SEO初体验","slug":"Nuxt-SEO初体验","date":"2020-05-16T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/nuxt-seo-chu-ti-yan/","link":"","permalink":"http://www.wzzzzzz.com/article/nuxt-seo-chu-ti-yan/","excerpt":"","text":"Nuxt SEO初体验 什么是 SEO SEO，这个词从宽泛的意义上讲，也叫 SEO优化，也叫网站优化，也叫搜索引擎优化 SEO，称是：Search Engine Optimization，中文为搜索引擎优化 说人话就是：怎样让你的网站被更多的网友搜索到 Nuxt SEO 初体验 修改 nuxt.config.js head: { title: '跳蚤的 nuxt 学习网站', meta: [ {charset: 'utf-8'}, {name: 'viewport', content: 'width=device-width, initial-scale=1'}, {hid: 'description', name: 'description', content: '跳蚤的 nuxt 学习网站，淘宝、小红书、知乎'} ], link: [ // favicon，若引用css不会进行打包处理 {rel: 'icon', type: 'image/x-icon', href: '/dog.ico'} ] } 修改每个页面的 head(){ return { title: '子页面中的标题', meta: [{ hid: \"description\", name: \"description\", content: \"this is 子页面 描述\" },{ hid: 'viewport', name: 'viewport', content: 'width=device-width, initial-scale=1.0' }] } }","categories":[],"tags":[{"name":"axios","slug":"axios","permalink":"http://www.wzzzzzz.com/tags/axios/"},{"name":"Nuxt","slug":"Nuxt","permalink":"http://www.wzzzzzz.com/tags/Nuxt/"}]},{"title":"Nuxt 服务端渲染调用接口","slug":"Nuxt-服务端渲染调用接口","date":"2020-05-16T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/nuxt-fu-wu-duan-xuan-ran-diao-yong-jie-kou/","link":"","permalink":"http://www.wzzzzzz.com/article/nuxt-fu-wu-duan-xuan-ran-diao-yong-jie-kou/","excerpt":"","text":"Nuxt 服务端渲染调用接口 axios的使用 安装npm install --save axios 使用 方式1 import axios from 'axios' asyncData(context, callback) { axios.get('http://localhost:3301/in_theaters') .then(res => { console.log(res); callback(null, {list: res.data}) }) } 方式2 import axios from \"axios\"; export default { props: {}, data() { return {} } async asyncData() { let url = \"http://localhost:3301/in_theaters\"; return await axios.get(url, { headers: { \"X-ACCESS-KEY\": \"xxx\" } }) .then(res => { return {data: res.data} }).catch(reason => { console.log(reason) }) } 为防止重复打包，在nuxt.config.js中配置 module.exports = { build: { vendor: ['axios'] } }","categories":[],"tags":[{"name":"axios","slug":"axios","permalink":"http://www.wzzzzzz.com/tags/axios/"},{"name":"Nuxt","slug":"Nuxt","permalink":"http://www.wzzzzzz.com/tags/Nuxt/"}]},{"title":"Nuxt 快速入门","slug":"Nuxt-快速入门","date":"2020-05-16T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/nuxt-kuai-su-ru-men/","link":"","permalink":"http://www.wzzzzzz.com/article/nuxt-kuai-su-ru-men/","excerpt":"","text":"Nuxt 快速入门 修改 index.vue 下原有的内 写三个标签，用于连接到其他页面 淘宝 知乎 小红书 编写 tb 页面（nuxt 会自动生成路径：/tb/tb） 编写 tb.vue 内相关内容 {{ data }} 运行","categories":[],"tags":[{"name":"Nuxt","slug":"Nuxt","permalink":"http://www.wzzzzzz.com/tags/Nuxt/"}]},{"title":"Go基本语法——快速入门","slug":"Go基本语法——快速入门","date":"2020-05-13T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/go-ji-ben-yu-fa-kuai-su-ru-men/","link":"","permalink":"http://www.wzzzzzz.com/article/go-ji-ben-yu-fa-kuai-su-ru-men/","excerpt":"","text":"Go基本语法——快速入门","categories":[],"tags":[{"name":"Go","slug":"Go","permalink":"http://www.wzzzzzz.com/tags/Go/"}]},{"title":"Npm 卸载eslint","slug":"Npm-卸载eslint","date":"2020-04-13T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/npm-xie-zai-eslint/","link":"","permalink":"http://www.wzzzzzz.com/article/npm-xie-zai-eslint/","excerpt":"","text":"Npm 卸载eslint 查看当前目录安装了哪些 npm 依赖包 npm list --depth=0 或 npm list 或 npm list --depth --global 删除对应的模块 npm uninstall 模块 &nbsp; 删除本地模块时你应该思考的问题：是否将在package.json上的相应依赖信息也消除？ npm uninstall 模块：删除模块，但不删除模块留在package.json中的对应信息 npm uninstall 模块 --save&nbsp;删除模块，同时删除模块留在package.json中dependencies下的对应信息 npm uninstall 模块 --save-dev&nbsp;删除模块，同时删除模块留在package.json中devDependencies下的对应信息","categories":[],"tags":[{"name":"Node","slug":"Node","permalink":"http://www.wzzzzzz.com/tags/Node/"},{"name":"Npm","slug":"Npm","permalink":"http://www.wzzzzzz.com/tags/Npm/"}]},{"title":"Nuxt 环境搭建","slug":"Nuxt-环境搭建","date":"2020-04-13T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/nuxt-huan-jing-da-jian/","link":"","permalink":"http://www.wzzzzzz.com/article/nuxt-huan-jing-da-jian/","excerpt":"","text":"Nuxt 环境搭建 一、通过 vue 安装 Nuxt 项目 安装 vue 环境 npm install vue-cli -g 使用vue安装 nuxt vue init nuxt/starter 使用npm install安装依赖包 npm install 出现如下图所示：（安装成功） 使用npm run dev 启动服务 npm run dev 出现如下图所示：启动成功 二、通过 Nuxt 脚手架安装 安装 Nuxt 脚手架 npm i create-nuxt-app -g create-nuxt-app my-nuxt-demo cd my-nuxt-demo npm run dev 出现如下图所示：启动成功","categories":[],"tags":[{"name":"Nuxt","slug":"Nuxt","permalink":"http://www.wzzzzzz.com/tags/Nuxt/"}]},{"title":"Neo4j学习（一）基本语法","slug":"Neo4j学习（一）基本语法","date":"2020-04-12T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/neo4j-xue-xi-yi-ji-ben-yu-fa/","link":"","permalink":"http://www.wzzzzzz.com/article/neo4j-xue-xi-yi-ji-ben-yu-fa/","excerpt":"","text":"Neo4j学习（一）基本语法 创建一个节点 create(a:Person {sex:\"男\",age:19}) a：是节点 Person：是标签 create(a:Person:Teacher {sex:\"男\",age:19}) 一个几点可以有多个标签修饰 查询结果 查询整个对象 match(a:Person) return a 查询对象中某个值 match(a:Person) return a.sex 查找所有节点 match(a) return * 注：match 和 return 要一起使用 创建关系 CREATE (节点1名:节点1标签)-[关系名:关系标签]->(节点2名:节点2标签) 关系：从1节点 指向 2节点 where 条件 match(e) where e.name = \"wuzhuo\" or e.name = \"wuzhuo2\" return e 删除 删除一个节点： match (x:Employee) delete x 注：删除节点时，节点必须没有关系指向（否则报错） 删除节点中一个属性、关系、标签： match (t:Teacher1) remove t.age return t Neo4j CQL DELETE和REMOVE命令之间的主要区别: DELETE 操作用于删除节点和关联关系。 REMOVE 操作用于删除标签和属性。 设置属性 match(a:Person) set a.hight=15 return a 排序 match(t:Teacher1) return t order by t.id desc","categories":[],"tags":[{"name":"Neo4j","slug":"Neo4j","permalink":"http://www.wzzzzzz.com/tags/Neo4j/"},{"name":"图数据库","slug":"图数据库","permalink":"http://www.wzzzzzz.com/tags/图数据库/"}]},{"title":"职场中的交流和沟通","slug":"职场中的交流和沟通","date":"2020-03-31T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/zhi-chang-zhong-de-jiao-liu-he-gou-tong/","link":"","permalink":"http://www.wzzzzzz.com/article/zhi-chang-zhong-de-jiao-liu-he-gou-tong/","excerpt":"","text":"职场中的交流和沟通","categories":[],"tags":[{"name":"工作","slug":"工作","permalink":"http://www.wzzzzzz.com/tags/工作/"}]},{"title":"SpringCloud学习2.0笔记(二) cloud 技术升级","slug":"SpringCloud学习2.0笔记(二)-cloud-技术升级","date":"2020-03-28T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/springcloud-xue-xi-2.0-bi-ji-er-cloud-ji-zhu-sheng-ji/","link":"","permalink":"http://www.wzzzzzz.com/article/springcloud-xue-xi-2.0-bi-ji-er-cloud-ji-zhu-sheng-ji/","excerpt":"","text":"SpringCloud学习2.0笔记(二) cloud 技术升级 cloud 技术升级（可替代的技术方案）：","categories":[],"tags":[{"name":"语言","slug":"语言","permalink":"http://www.wzzzzzz.com/tags/语言/"},{"name":"SpringCloud2.0","slug":"SpringCloud2-0","permalink":"http://www.wzzzzzz.com/tags/SpringCloud2-0/"}]},{"title":"SpringCloud学习2.0笔记(二) 父工程Project空间新建","slug":"SpringCloud学习2.0笔记(二)-父工程Project空间新建","date":"2020-03-28T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/springcloud-xue-xi-2.0-bi-ji-er-fu-gong-cheng-project-kong-jian-xin-jian/","link":"","permalink":"http://www.wzzzzzz.com/article/springcloud-xue-xi-2.0-bi-ji-er-fu-gong-cheng-project-kong-jian-xin-jian/","excerpt":"","text":"SpringCloud学习2.0笔记(二) 父工程Project空间新建","categories":[],"tags":[{"name":"语言","slug":"语言","permalink":"http://www.wzzzzzz.com/tags/语言/"},{"name":"SpringCloud2.0","slug":"SpringCloud2-0","permalink":"http://www.wzzzzzz.com/tags/SpringCloud2-0/"}]},{"title":"SpringCloud学习2.0笔记(一) 版本选择","slug":"SpringCloud学习2.0笔记(一)-版本选择","date":"2020-03-25T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/springcloud-xue-xi-2.0-bi-ji-yi-ban-ben-xuan-ze/","link":"","permalink":"http://www.wzzzzzz.com/article/springcloud-xue-xi-2.0-bi-ji-yi-ban-ben-xuan-ze/","excerpt":"","text":"SpringCloud学习2.0笔记(一) 版本选择 版本的选择 springboot 新版本以数字递增 springcloud 新版本以英国伦敦地铁站名称（首字母递增） spring boot 版本 spring cloud 版本 2.x H 具体版本对应地址https://start.spring.io/actuator/info 2.x 版本常用的组件pom org.springframework.boot spring-boot-starter-parent 2.2.2.RELEASE pom import org.springframework.cloud spring-cloud-dependencies Hoxton.SR1 pom import com.alibaba.cloud spring-cloud-alibaba-dependencies 2.1.0.RELEASE pom import","categories":[],"tags":[{"name":"语言","slug":"语言","permalink":"http://www.wzzzzzz.com/tags/语言/"},{"name":"SpringCloud2.0","slug":"SpringCloud2-0","permalink":"http://www.wzzzzzz.com/tags/SpringCloud2-0/"}]},{"title":"Jdk 源码学习环境搭建（idea）","slug":"Jdk-源码学习环境搭建（idea）","date":"2020-03-24T16:00:00.000Z","updated":"2021-01-14T01:40:16.000Z","comments":true,"path":"article/jdk-yuan-ma-xue-xi-huan-jing-da-jian-idea/","link":"","permalink":"http://www.wzzzzzz.com/article/jdk-yuan-ma-xue-xi-huan-jing-da-jian-idea/","excerpt":"","text":"Jdk 源码学习环境搭建（idea） 新建java项目 创建两个目录 解压jdk自带源码zip 找到对应的jdk安装目录 进入安装目录解压 src.zip 拷贝解压后的 src 中文件夹到工程中 source 目录下 修改debug，调试可以进入源码 修改对应源码路径","categories":[],"tags":[{"name":"环境","slug":"环境","permalink":"http://www.wzzzzzz.com/tags/环境/"},{"name":"jdk","slug":"jdk","permalink":"http://www.wzzzzzz.com/tags/jdk/"}]},{"title":"Git 入门（一）","slug":"Git-入门（一）","date":"2020-03-20T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/git-ru-men-yi/","link":"","permalink":"http://www.wzzzzzz.com/article/git-ru-men-yi/","excerpt":"","text":"Git 入门（一） 1.git 安装与初始化 https://www.jianshu.com/p/7edb6b838a2e 2.git 相关命令 2.1 git clone 命令 git clone 命令可以将远程仓库的代码克隆到本地，并在本地生成一个代码仓库版本库。ps：本地版本库中有一个隐藏的 .git 文件，版本控制都依赖于它 例如：git clone https://git.dev.tencent.com/zl3450341/BossCard.git 详细命令可参考： https://blog.csdn.net/techbirds_bao/article/details/9179853 2.2 git status 命令 git status 命令可以查询，本地代码仓库中是否存在**修改，**每次使用这个命令你就可以查看那些文件被修改了。 命令的详细介绍，有时间的同学可以看这里： https://blog.csdn.net/qq_39783244/article/details/80592282 ps: git status 可以缩写成 git st 2.3 git diff 命令 git diff [文件名] 命令可以查看该文件本修改了那些地方，— 代表代码被删除的地方，+++ 代表代码添加的地方 命令的详细介绍： https://www.jianshu.com/p/80542dc3164e 常用的指令： git diff ：意义，查看文件在工作目录与暂存区的差别。如果还没 add 进暂存区，则查看文件自身修改前后的差别。也可查看和另一分支的区别。 git diff --cached ：意义，表示查看已经 add 进暂存区但是尚未 commit 的内容同最新一次 commit 时的内容的差异。 也可以指定仓库版本； 2.4 git add 命令 git add &lt;文件名&gt; 命令是将修改的文件添加到暂存区中。 git add . 会把当前目录中所有有改动的文件**（不包括.gitignore中要忽略的文件）**都添加到git缓冲区以待提交 git add * 会把当前目录中所有有改动的文件**（包括.gitignore中要忽略的文件）**都添加到git缓冲区以待提交 所以在有要忽略的文件（如：配置文件之类的）有做修改的时候 git add .可以正常工作，会把所有非忽略的所有有改动的文件添加到缓冲区 git add *则会报错，且此几命令不会添加任何文件到缓冲区 可以参考： https://z724130632.iteye.com/blog/2387009 2.5 git log 命令 该命令记录当前分支中所有提交，可以查看 git 每个版本的生成的hash码，关于根据hash码可以进行版本回退，回退命令可以查看：git reset 和 git revert 如果有时间“有耐心”你可以看看： https://www.cnblogs.com/bellkosmos/p/5923439.html 2.6 git reflog 命令 该命令记录，该版本仓库中一些命令操作，比如分支切换，clone 仓库，版本回退一些信息 2.7 git fetch 命令 远程主机的版本库有了更新，需要将这些更新取回本地，这时就要用到git fetch命令。 $ git fetch &lt;远程主机名&gt; 上面命令将某个远程主机的更新，全部取回本地。 git fetch命令通常用来查看其他人的进程，因为它取回的代码对你本地的开发代码没有影响。 默认情况下，git fetch取回所有分支（branch）的更新。如果只想取回特定分支的更新，可以指定分支名。 git fetch &lt;远程主机名&gt; &lt;分支名&gt; 比如，取回origin主机的master分支。 git fetch origin master 所取回的更新，在本地主机上要用\"远程主机名/分支名\"的形式读取。比如origin主机的master，就要用origin/master读取。 2.8 git branch 命令 git branch 来查看我们的git仓库有几个分支 git branch -a 可以查看git 远程仓库所有分支 git branch [分支名] 新建一个分支 详细介绍可以参考 https://www.yiibai.com/git/git_branch.html 2.9 git commit 命令 该命令可以用来将暂存区中的代码提交到本地仓库中 git commit 会提示缺少提示信息，必须添加参数 -m 和描述信息 git commit -am 可以将工作区中的代码添加，暂存区并存到本地仓库中 详细介绍可以参考： https://www.cnblogs.com/qianqiannian/p/6005628.html 2.0.1 git reset 命令 该命令会将 commit 到本地仓库中的文件，回退到工作区中 也可以将暂存区中文件恢复回退到暂存区中。 git reset HEAD &lt;文件名&gt; git reset --soft HEAD^ 将版本回退到上一个版本，不影响工作区和暂存区中的数据 git reset --hard HEAD^ 将版本回退到上一个版本，工作区和暂存区中的数据会丢失 git reset --mixed HEAD^ 将版本回退到上一个版本，恢复暂存区中的数据被恢复至工作区中 该命令同等与 git reset HEAD^ 详细介绍可见： https://www.cnblogs.com/fireworld/p/8961760.html 2.0.2 git revert 命令 git revert 撤销 某次操作，此次操作之前和之后的commit和history都会保留，并且把这次撤销 作为一次最新的提交 git revert HEAD 撤销前一次 commit git revert HEAD^ 撤销前前一次 commit git revert commit （比如：fa042ce57ebbe5bb9c8db709f719cec2c58ee7ff）撤销指定的版本，撤销也会作为一次提交进行保存。 git revert是提交一个新的版本，将需要revert的版本的内容再反向修改回去， 版本会递增，不影响之前提交的内容 reset 和 revert 的区别可以看这里： https://juejin.im/post/5b0e5adc6fb9a009d82e4f20 2.0.3 git checkout 命令 git checkout [文件名]，撤销在工作区中的修改，还未提交到暂存区的情况。 git checkout [分支名]，切换分支 git checkout -b [分支名]，以当前分支为基础创建一个新的分支，并切换到新的分支上 详细命令可看： https://blog.csdn.net/longintchar/article/details/82953474 2.0.4 git rm 命令 git rm 是将文件删除后，自动添加到暂存区中 rm 文件，是将文件删除，不会添加到暂存区 git rm file: 从staging区移除文件,同时也移除出工作目录. git rm --cached: 从staging区移除文件,但留在工作目录中 命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。 2.0.5 git remote 命令 为了便于管理，Git要求每个远程主机都必须指定一个主机名。git remote命令就用于管理主机名。 不带选项的时候，git remote命令列出所有远程主机。 2.0.6 git pull 命令 git pull 命令其实相当于git fetch 和 git merge git pull命令用于从另一个存储库或本地分支获取并集成(整合)。git pull命令的作用是：取回远程主机某个分支的更新，再与本地的指定分支合并 详细命令可参考： http://www.ruanyifeng.com/blog/2014/06/git_remote.html 2.0.7 git push 命令 命令用于将本地分支的更新，推送到远程主机。 git push origin branchName : 把当前分支merge到远程分支branchName 详细命令可参考： http://www.ruanyifeng.com/blog/2014/06/git_remote.html 2.0.8 git merge 命令 合并当前分支和其他分支: git merge &lt;其他分支名&gt;, 若两个分支之间存在冲突,必须手动解决冲突后再提交 远程合并分支 git fetch &lt;远程仓库名&gt; git merge &lt;远程仓库名&gt;/&lt;远程分支名&gt; 执行上面两步,先必须通过git remote add &lt;远程仓库名&gt; &lt;此仓库在github上的URL&gt;与远程仓库关联,然后再fetch和merge,解决冲突与本地一样 git merge --abort 抛弃当前合并 git merge 详细命令可以参考 https://www.jianshu.com/p/58a166f24c81 merge冲突时二选一 https://blog.csdn.net/qinjienj/article/details/7816047 2.0.9 git stash push 和 git stash pop 当你在一个分支上编写代码时，还没提交。但是又想切换到新的分支上去。如果你切换分支是允许的。你需要将工作区或者暂存区中的操作git stash push 压入一个栈中，这样就可以切换到别的分支上去了。当其他分支操作完毕，可以切回当前分支：使用git stash pop 恢复原先的操作 详细命令可以参考： https://git-scm.com/book/zh/v1/Git-%E5%B7%A5%E5%85%B7-%E5%82%A8%E8%97%8F%EF%BC%88Stashing%EF%BC%89 如果还是不会怎么办？ git --help 可以查看常用的命令 git help**「相关命令」**可以查看具体命令的操作","categories":[],"tags":[{"name":"Git","slug":"Git","permalink":"http://www.wzzzzzz.com/tags/Git/"}]},{"title":"微信生态中细致运营的一百条小技巧","slug":"微信生态中细致运营的一百条小技巧","date":"2020-03-13T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/wei-xin-sheng-tai-zhong-xi-zhi-yun-ying-de-yi-bai-tiao-xiao-ji-qiao/","link":"","permalink":"http://www.wzzzzzz.com/article/wei-xin-sheng-tai-zhong-xi-zhi-yun-ying-de-yi-bai-tiao-xiao-ji-qiao/","excerpt":"","text":"微信生态中细致运营的一百条小技巧 杨涛 在知识星球【生财有术】 中做的分享，本站进行了精校和高亮处理。 今天是认识亦仁一周年的大日子，写点东西，顺序分类什么的就不顾了啊，想到什么写什么，估计得写一万字吧，文笔不好，大佬们慢慢看哈，应该有那么几十条能get到你。 说在前头的话，在座是一亿假互联网人，我们宗旨是要为十三亿真互联网人服务，so，小号中的，普适性的普渡技。 一百条小技巧 ★★★，自己和团队抽个时间，手机放一边，拿张纸，自己默写微信的功能，浅入深，看看能不能拼凑出一百个功能，这个行为非常有帮助。 ★★★，各种功能还自带大流量哦，举个小例子，点击–发现，点击–游戏，进入，底下一排第二个，游戏圈，进去看看，惊不惊喜，意不意外，画像一致的，去畅享千万曝光吧。 ★★★，其实权重什么的，真是说不准，乡下号，爱怎么搞怎么搞，某些高危园区的，就算是真人，在严打的时候也一样会限制，简单理解是特征吧，某些软件，就好比在公安局备案过的嫖客，每次抓就先抓带这种特征的。 ★★★，辅助工具的话wetool，爆汁，微精灵，微易发，问财神咯，就不指定推荐了，都挺好用，看个人。 ★★★，被删除的好友重新加上不会被发现，删除对方后，只要你记得对方的微信号，直接重新加他好友就可以了。前提是对方没有将你删除，如果对方也删除了你肯定需要验证的。 ★★★，除了配合工具测僵尸知道自己是不是被删被拉黑了，单点突破或者小范围，也可以优雅滴知道，比如可以转0.1元给他，会提示不能转，也可以拉群，30人以下群是不被提醒的。 ★★★，微信号是可以不绑手机卡哒，手机号不可以解绑，只能用换绑来解除绑定。微信换绑，需要准备Q号年龄在一年以上的，或者把设置微信号登陆。新的手机号貌似无限注册微信，（一个月只能注册一次） ★★★，简单模拟真人行为的，加群互动，发红包，转账，跟老号语音或视频，3分钟以上。 ★★★，可以使用通讯录导入和微信id导入，wxid可以通过软件在群里批量获取，通讯录导入可以尝试用脚本跑号码段（我指跑139,130等各种老的号码段，相对精众你懂的），或者通过各种裂变手段收集的手机号来。 ★★★，点赞和朋友圈留言是一种提高粘性和存在感的行为，如果要出来卖，请抛弃那点点精神洁癖，秒变点赞狂魔也不是不可以，如果是营销号，记得天天刷存在哦。 ★★★，微信运动的封面是一个很好的广告位，我的小号每天都第一，就用那个摇摆机没毛病，除了曝光，特么每月还有七八杯星巴克免费之类的，羊毛薅一堆，还是那句话，别替你的受众去思考，也许他们就喜欢每天点开看排行。 ★★★，加好友的话术极其重要。1、决定了通过率；2、决定通过之后的留存和信任度转化率。不同的群是可以用不同的话术的，付费群的话比如，我是来自生财有术的杨涛，至今好像都通过了，其他各种啥老同学，你好，朋友推荐的，有事找你，来自名片分享，交个朋友，我换微信号啦等，挺多的，都不错，看人群。ps，今天李神还给我发了两条验证，一条是ems头像，你的快递在小区门口，我给你放鸟箱了，一条是，我是你楼下的住户，你的卫生间是不是漏水? ★★★，多号运作，所有微信号必须有Excel来分类并且手机背后要贴备忘标签的。 ★★★，进群看群规，改群昵称是比想象中重要的，群昵称是最好的广告，且是蹭热点，刷存在的利器，举例，我可以在某个群改昵称为亦仁的表哥，或者改成日加五千粉-杨涛，会get到一些眼球。之前还试过几个有意思的，比如_@,这样人家@你就变成了@_@，比如，你已被群主亦仁踢出本群，然后就被群嘲了等等。 ★★★，关于人设多说两句，人设人设人设！ 一个优雅真实的朋友圈是可以这样的，大号里的好友朋友圈有特别突出的，不管哪方面，然后你用大号转发她的朋友圈图片和文字给你的小号，这样你的小号就是一个真实而优雅的真人，当然你要去淘宝买也可以，但是用的人多了。 ★★★，在微信中，人和人之间的沟通应该是纯文字的，且必须是纯文字的，任何一个语音应该是不会去听的，所以，我用讯飞，识别率确实高，另外，善用自带的标签快捷回复功能，我的客服自带一百条以上的快捷回复。 ★★★，wetool等工具最核心功能是公号裂变工具，牛逼在于群功能，结果被用成了爆粉工具。 ★★★，“马住”用来备忘非常好用，这条重点说下，群聊中有某些干货，你就直接往这条干货底下打一个“马住”，然后每个月底，直接搜索“马住”，然后把所有“马住”的内容都复制出来另存，这个就是你这个月的隐性收获了。另一个就是公司小群布置任务，有时候就是不钉钉，就布置完任务然后输入一个“马住”代表对这个事情的重视，这个知识点的重要，等场景。—其实我说的就是mark的意思，“马住”是为了表达对马老师的仰慕倾慕，同时也是一个差异化的词，确保搜出来都是你在意的内容。 ★★★，装逼的学名叫做自我实现，是马斯洛需求层次的顶层需求，希望做产品做传播要赋予它这个属性。zhuangbility lead niubility。 ★★★，每当你老婆要和你合影发圈的时候，记得深情目光看向她，别看镜头，这样当她发完圈，闺蜜的赞叹会让她的虚荣心得到极大的满足。 ★★★，忘记什么日主动只能加多少人，被动最多能加多少人诸如此类的，看号的权重的。 ★★★，一证十五卡一机一卡一号，能用流量尽量用流量，费用各地不同吧，我是电信宽带免话费五张，移动月租19块，联通月租18块，我们这旮旯好像没有免月租的。 ★★★，取消验证，有验证的七十二小时就失效的，取消验证之后，可以突破一些加好友的上限，一点点。 ★★★，请关注多几个伟大的卖货号，文案带货确实是值得一学。 ★★★，人设，也就是昵称，头像，朋友圈比你想像的重要得多。 ★★★，你的粉想看什么你就展示什么给她，其实你不知道他们都有关注你的，不信你发个送东西的，保准一堆人找你要。 ★★★，书是买来摆设的，课是买来不听的，9成人适用，扪心自问吧亲们，此处应有bgm，易（良）灵（心）微课了解一下。tx ★★★，群是很容易获得的，尤其是辅食，童装，拼团，国学，中医，读书会等，这些泛群是有价值的，你拿出圆来画，她们都符合某几个特征。举一反三，贯彻到所有的号上。 ★★★，如果要玩多号，玩群，请时刻告诉自己，你是个美女。 ★★★，想要卖课的，最好可以多加一些付费群，越贵越好，为啥呢，相信我，付费有瘾，你如是，他们亦然。 ★★★，某种意义上来说，获取粉丝成本是不超过三毛一个才达标的，有点拗口，粉不可以骗，他的钱可以骗。 ★★★，王六六的裂变增长群可以了解一下。 ★★★，其实是可以和你的朋友们一起共建一个巨大的流量池，核心词，共建共享，等体量交换。 ★★★，截流可以是一个有效的行为，小心小心，他们好烦。 ★★★，群聊天记录中搜索关键词是可以打开新世界的。 ★★★，微信是有seo的。 ★★★，好文案是大于好产品的！的！的！的！ ★★★，不管什么场景，让用户先付费，然后把这个流量导来导去转一圈，然后再跳出APP下载链接，不下就听不了课享受不了服务啊，流氓些，但是挺好。 ★★★，请善用H5！ ★★★，最底层的信息是手机号码，给自己的反复触达留一扇门。 ★★★，视频透出可以选择在前三秒后三秒带图带信息，30秒后淡入二维码留存几率大。 ★★★，部分行业和类目，海报或者视频或者问答等各种透出，要留微信号的别怕路径长，别纠结二维码和留微信号的区别，这个本身是一种清洗，愿意打开手机，点开微信，选择添加朋友，然后再输入你手机号的，本身就是精准的一种表现模式。 ★★★，一个好的视频封面可以大上限的提高打开率。 ★★★，尽可能让同一波流量在你的各种不同载体里头转一圈，公众号，个人号，群，知识星球，小程序之类的。 ★★★，在群里发广告永远选择群三十分钟左右没发言的时候，这样曝光几率最大化。 ★★★，如果想建活跃群，托和话题很重要，30人是一个分界线，30人以内的小群大概率可以活跃并存活的比较久。 ★★★，改昵称和发自我介绍是一种仪式感，每个人在群里的每一次发言，被每一次@，以及在这个群里加的每一个好友，其实增加的是他自己本身对这个群的认同和彼此的凝聚力。 ★★★，广告群的价值体现在你会不会做信息分析。 ★★★，一个微信一天进群直到频繁，三四个小时后可以再试一次，再频繁之后第二天再进，链接并没有失效。 ★★★，进群链接七天失效，常见大号拉小号，小号频繁，以及买群与换群的行为中。 ★★★，共同好友辅助解封，要互为好友七天以上，家中常备解封号。 ★★★，充分利用朋友圈提高曝光，这不，再小的个体也有自己的声音，单号理论展现几千次，cpm0，哪儿去找？ ★★★，某些场合，比如客单高的产品，沙龙或者高端群的吸粉，微信通过人的时候，一次通过三四个，及时回复与跟进可以提高粘性和转化，比及时通过更重要。 ★★★，活跃的同行群，是可以看项目，你所在的类目有什么新产品，新模式你没有发现。 ★★★，活跃的群，还可以看话术，同行的海报和广告话术积累下来都是很宝贵的素材。 ★★★，在活跃的群里，还可以获取更多新群，群里同行会发出来二维码加群，也可以扮素人，加活跃的同行，问她要，被揭穿后，可以换，可以买。 ★★★，流量本身也是没有属性的，最终会流量会流向能用它创造出最高价值的人手上。只要是流量，都有用。所以流量没有好坏优劣之说，比如A10的亦仁是好对吧，但是你一个买壮阳药的加了他，想等他给你消费，估计得等30年。女的。活的。即是好的。 ★★★，聊天中可以查找交易信息，当然同时还有文件，链接，音乐图片视频，以及按日期检索，真心好用，+1。 ★★★，可以给聊天中的信息设置日期提醒，比如今天妹子约了我明天共进晚餐，我长按就是设置明天6点别忘记，到时候就会收到提醒。 ★★★，可以用给赞生成自己的赞赏码等超多玩法等你研究。 ★★★，聊天记录可以批量转发给多人。 ★★★，群主可以了解到每个群员的加群途径，从而区分连带责任。 ★★★，自己发自己仅小号可见的朋友圈可以用小号预览效果，譬如，可以尝试下不同系统朋友圈几行字内不折叠。 ★★★，新进一个群，想知道群里有多少好友在，方便知道什么该说什么不该说，点击通讯录–标签–新建–从群里导入–选择群聊，即可。 ★★★，查看公号热度（即有多少好友一同关注），取消关注–搜索该公众号–右边就可以知道，比方说某男同号，艾玛竟然有50个朋友关注了- -！ ★★★，建单人群，拉2个好友然后再将两人删除，或者，面对面建群，连拉人都不用，直接就单人群了，妥了，顶替文件传输助手，草稿箱，闪念，避免群发尴尬，游戏续命等。 ★★★，查看好友某个时间段朋友圈（搜索-朋友圈一好友-筛选） ★★★，单点屏蔽三部曲，某人消息不提醒，某人单独分组命名为朋友圈不给他看，然后每次发圈选不让谁看。觉得麻烦么？因为不能屏蔽，不能拉黑但不想交流的人还是有的。 ★★★，当已点赞或者评论某条朋友圈,朋友们也在下面互动,如果不想收到大量的提醒,los用户只要将这条消息向左划然后选择不再通知就可以,安卓用户则是长按这个提醒，然后选择不再通知。 ★★★，删除好友后再次添加不会提醒对方。 ★★★，长按头像可在群聊里@该用户，两人聊天时候长按头像即复制对方昵称，微信pc端右键即可引用此条的聊天内容。 ★★★，朋友圈长按头像可直接设置朋友圈权限，唉，这年头，路径短一些就是一些，和pc端一样，养成良好的组合键习惯，可以凭空省下很多时间。 ★★★，微信发送高清照片，聊天窗口—加号长按相册按钮。 ★★★，每过一个月，微信容易卡，想要微信拍照不自动保存，设置关掉自动存储的开关。设置—通用—照片和视频。 ★★★，长按群视频或者，朋友圈小视频，选择静音播放，告别岛国尴尬。 ★★★，做某些裂变行为的时候，可以设置为默认通过好友，这样的好处是，永久可以生效，只需要回头加他好友即可。而不是3天失效。 ★★★，同样的，做某些不是那么符合价值观的裂变行为时候，可以设置为需要验证后通过，然后谨记，2天后再通过他，九成已经忘了他是为何加你的。 ★★★，长按拍照按钮，然后上下滑动手指，可以调节焦距。 ★★★，在手机上删除掉全部聊天记录之后，登录网页端还可以看到最后一些内容，保持电脑和手机在线这个习惯挺好的，偶尔遇到没电的情况还可以到电脑端续上聊天，而且文件的话也可以直接下载到电脑看。 ★★★，把gif动图发到微信网页版,可以自动转为动画表情。 ★★★，微信主页面，左右滑动可以切换不同栏目。 ★★★，技巧卡包里头，朋友的优惠券，经常有好吃的餐券和酒店券，是否可以自己弄个券分享，然后全好友可见呢？呵呵呵。 ★★★，绑定QQ后，在朋友圈发布后，可以同步到QQ空间，营销的同学记一下，珍而重之，春光灿烂的战场在QQ。 ★★★，可以提醒谁看@最多10个好友哦。 ★★★，长按相机键不放开即可发布纯文字朋友圈。 ★★★，发朋友圈的时候，有个所在位置，可以自定义编辑，装逼神器，比如我可以发一张手持红酒杯，定位输入生财有术总部，倍儿有面子。 ★★★，我们都有大量的微信群，有些碍于面子不好退，时不时就999+，选择我-设置-通用-清理微信储存空间-查看-选择对应的好友或群清除即可。 ★★★，有时候很多好友给你朋友圈留言了，或者你去你的朋友的朋友圈留言了，然后去忙其他事情了，过后想去撕逼或者当吃瓜群众，另外比如做活动做裂变的时候，在我的相册右上角就可以查看所有给你留言互动的内容啦。 ★★★，长按朋友圈右上角拍照图标就可以发纯文字的朋友圈啦。 ★★★，微信聊天记录导出备份必须养成习惯，虽然你是如此的严谨，但是每过阵子总会听到朋友说艾玛聊天记录没了，好难过。 ★★★，搜一搜里头有搜索表情，有时候此情此景一定要某个表情才能完美切入，哈哈，嗯，确保斗图无忧，当然，涛哥表情图全套了解一下。 ★★★，删除好友后聊天记录就没有啦，加回来也没有啦，搜不到啦，但是拉黑加回来，聊天记录还在。 ★★★，安卓长按相册就会跳转到相机，自带美颜哦。 ★★★，微信相机打开后，双击是可以切换镜头的哦。 ★★★，微信钱包里头，支付管理，转账到账时间是可以设置即时到账，2小时，和24小时的哦。 ★★★，辅助注册+辅助解封，1次/月，2次/半年，3次/年，先把自己的大号小号拉到一起，彼此互加咯。 ★★★，个人认为要是某个项目做个一年，客户关系管理上，沉淀10个左右的满人个人号，要是再有几十个活跃的微信群，就是很棒的一年。 ★★★，冷启是最难了，那能每次大辉哥哥，曹叔叔头条给你冷启对吧，所以我们假设大辉哥哥的冷启指数是200，曹叔叔的冷启指数是200，那么我们均300人群的冷启指数是0.5/单群，也划算啊，也牛逼啊，据我所知，手握10万群应该是不大难，具体可以参考当年淘客们，另外之前有个姓唐的风骚少年好像也是短时间做到了近2w群。 ★★★，这不，全民小号热潮，想知道你买的小号是几几年注册的么，点开钱包—&gt;右上角—&gt;账单—&gt;年份—&gt;往回翻，你就会发现最早的一个月是几几年几月啦，如果没有绑卡没有实名认证的，也没有关系，一样从这个路径进入，账单是按注册时间出现的，哪怕没有使用过这个功能。 ★★★，像我这种偶尔要客串七八个客服微信的男子怎么办，如何在电脑端打开多个微信呢，很简单，鼠标单击桌面微信快捷方式图标，然后用单身28年的手速疯狂按下回车键，按几下就可以出现多少个微信登陆框，然后挨个登陆就好了，哦对了，我的记录是21个。 ★★★，裂变的时候您会经常发现分享到朋友圈加好友就给价值多少的PPT模板或者裂变海报五万张或者给价值多少的小猪佩奇500集高清视频，但最后给的都是个云盘地址，那我就聪明了，我把这些下载下来，然后打开，确认没有别人的联系方式，然后多加了很多料，然后打上我的联系方式，然后重新到云盘，这样，然后发到运营群，同行群里头，这样很多人就会加我啦，获取了，然后转存下，看也不看的用在他们的裂变素材中，嘿嘿嘿。 ★★★，做推广的时候想主推一个微信，会存在推二维码，推手机同号，推微信号等几种情况，那么又会出现几种情况，部分平台推二维码是拒绝的，手机号是拒绝的，微信号的意义就出来了，取一个很好记的微信号字母+数字还是可以做到五个字符内解决的，这样起码过了机器识别这关，快去试试吧。 ★★★，如何一次推广长期受用，打开微信，点开我，点开隐私，点开添加我的方式，有没有发现第三个是QQ，很好，不论是群推海报，还是SEO等其他方式，有时候一次成功的推广，这个号就被加满了，那么如果我们推广的是QQ号，那就可以很愉快的解绑换绑到一个新的微信号上，这样客户就又可以通过这个QQ号加上你的新微信啦。解绑换绑QQ在账号与安全，更多安全设置，点击QQ，再点击右上角就可以啦。 ★★★，天气不错我来家旁边的SM喝咖啡，SM呢是厦门最标志性的商场，比万达高一级，一路走来看到了超过五个小蓝杯的广告，确实是强植入了我脑海，我就想啊，在同等文案和诱惑的情况下，九成的本地新店投放是声势浩大的一波，然后泯然众人，从ROI角度来说，比如我在厦门开了家泡椒田鸡或者婚纱摄影，那么要做推广的时候就绝不会是一波流，我会投放厦门厦门，大城小事，厦门生活等本地号，然后本地群，本地朋友圈投放隔三天一波连续一个月，然后到店转发也是持续持续，这样就能生造出一个很热门的店铺。 ★★★，又联想，我就随便举一个例子，比方说我拿10个号同时加入一个付费的群，有点小高端，然后争取加上这些群友，那么比如今天想做一个小贵的网课推广，那么我就用这十个号按时段发这个网课的码，对于这个群里的人来说就等于，你有10个好友从早上八点到晚上八点都在你的朋友圈发这个网课，而你看到你的好友都买了都推了，同时又对你貌似又有用，你基本上就会买了，不会有太多的思考，最起码，你在你朋友圈里看到连续十个人说有个大佬叫亦仁，哪怕你不认识，起码也认识了，会去搜一搜吧，这是一个很有意思的事情。同理可以在宝妈群，小区群，或者其他相对垂直画像一致的社群里适用。 ★★★，我一般最常用的3个小号有拉了一个群，重要的东西比如文件啊，图片啊，往里头一丢，这是天然的云端办公哇，当然了，我还有分类^_^，比方说，牛逼的小程序要拆解的，一个群，看到眼前一亮的文章，没空细致看的，丢一个群，精华海报，一个群，等等。 天色已晚， 最后，执行是不是第一位的？ 有句话叫做， 你的勤奋不足以考验你的智商， 你的执行还没办法检验你的创意， 好，今天的鸡汤就到这里， 纯手打，累，进阶版下次再写。 评论精选 猫先生：微信如何seo？ 杨涛 回复 猫先生：微信的搜索，也就是那个放大镜，越来越频繁的被使用，里头有公众号，小程序，朋友圈，文章，视频，百科，问答等老多了，都可以做优化的，相对容易，另，举例，甚至哪怕是你在某群里头埋了点，两种，比如你的某群昵称，群名字就叫做世界杯，或者你曾经在某群聊天记录里头埋点有提过你是做世界杯外围投注的，那么下一个热点世界杯来了，别人搜世界杯，就会收到：某群（包含 sonne（世界杯投注）），再下来，聊天记录，某群，10条相关，点开，就是你的名字，都会被搜索到，我这样说清楚么，您举一反三下。","categories":[],"tags":[{"name":"微信运营","slug":"微信运营","permalink":"http://www.wzzzzzz.com/tags/微信运营/"}]},{"title":"SpringCloud学习笔记(十一) Config 分布式配置中心","slug":"SpringCloud学习笔记(十一)-Config-分布式配置中心","date":"2020-03-09T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/springcloud-xue-xi-bi-ji-shi-yi-config-fen-bu-shi-pei-zhi-zhong-xin/","link":"","permalink":"http://www.wzzzzzz.com/article/springcloud-xue-xi-bi-ji-shi-yi-config-fen-bu-shi-pei-zhi-zhong-xin/","excerpt":"","text":"SpringCloud学习笔记(十一) Config 分布式配置中心 在 GitHub 上创建仓库（配置文件） 克隆并添加配置文件（application.yml）ps：需要 utf-8 格式 上传到远程仓库 创建 config server 微服务 pom org.springframework.boot spring-boot-starter-actuator org.springframework.cloud spring-cloud-config-server yaml server: port: 3344 spring: cloud: config: server: git: uri: https://github.com/flea-wu/wfw-config.git username: 账号（如果 Github 配置了公私钥，可以省略） password: 密码 application: name: cloud_confg_name @EnableConfigServer @SpringBootApplication @EnableConfigServer public class CloudConfigStart { public static void main(String[] args) { SpringApplication.run(CloudConfigStart.class, args); } } test http://127.0.0.1:3344/application-test.yml http://127.0.0.1:3344/application-dev.yml","categories":[],"tags":[{"name":"语言","slug":"语言","permalink":"http://www.wzzzzzz.com/tags/语言/"},{"name":"SpringCloud","slug":"SpringCloud","permalink":"http://www.wzzzzzz.com/tags/SpringCloud/"},{"name":"Config","slug":"Config","permalink":"http://www.wzzzzzz.com/tags/Config/"}]},{"title":"SpringCloud学习笔记(十) Zuul 路由网关","slug":"SpringCloud学习笔记(十) Zuul 路由网关","date":"2020-03-07T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/springcloud-xue-xi-bi-ji-shi-zuul-lu-you-wang-guan/","link":"","permalink":"http://www.wzzzzzz.com/article/springcloud-xue-xi-bi-ji-shi-zuul-lu-you-wang-guan/","excerpt":"","text":"SpringCloud学习笔记(十) Zuul 路由网关 作用 提供 =&gt; 代理 + 路由 + 过滤 三大功能 Ps : Zuul 服务最终还是会注册进 Eureka 环境配置 pom api com.fleawu 1.0-SNAPSHOT org.springframework.cloud spring-cloud-starter-netflix-eureka-client org.springframework.boot spring-boot-starter-actuator org.springframework.cloud spring-cloud-starter-netflix-zuul 2.0.3.RELEASE yml server: port: 4001 spring: application: name: microservicecloud-zuul-gateway eureka: client: service-url: defaultZone: http://eureka01:6001/eureka,http://eureka02:6002/eureka,http://eureka03:6003/eureka instance: instance-id: zuul-gateway prefer-ip-address: true 主启动类 @SpringBootApplication @EnableEurekaClient @EnableZuulProxy //开启zuul public class ZuulStart { public static void main(String[] args) { SpringApplication.run(ZuulStart.class, args); } } 测试 不用路由访问微服务提供者：http://127.0.0.1:7001/buy/book 使用路由访问微服务提供者：http://127.0.0.1:4001/provider/buy/book 修改yml # 代理名称 zuul: routes: a.serviceId: provider a.path: /b/** # 忽略单个的微服务名称 # ignored-services: provider # 忽略所有微服务 ignored-services: \"*\" # 统一前缀 prefix: /wu @EnableZuulProxy 和 @EnableZuulServer 区别 ​ @EnableZuulProxy 强一点","categories":[],"tags":[{"name":"语言","slug":"语言","permalink":"http://www.wzzzzzz.com/tags/语言/"},{"name":"SpringCloud","slug":"SpringCloud","permalink":"http://www.wzzzzzz.com/tags/SpringCloud/"},{"name":"Zuul","slug":"Zuul","permalink":"http://www.wzzzzzz.com/tags/Zuul/"}]},{"title":"Node 安装多个版本","slug":"Node-安装多个版本","date":"2020-03-04T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/node-an-zhuang-duo-ge-ban-ben/","link":"","permalink":"http://www.wzzzzzz.com/article/node-an-zhuang-duo-ge-ban-ben/","excerpt":"","text":"Node 安装多个版本 解决方案一（n） （1）安装node版本管理模块n sudo npm install n -g 下边步骤请根据自己需要选择 （2）安装稳定版 sudo n stable （3）安装最新版 sudo n latest （4） 版本降级/升级 sudo n 版本号 解决方案二（参见） https://blog.csdn.net/Fabulous1111/article/details/84983869","categories":[],"tags":[{"name":"Node","slug":"Node","permalink":"http://www.wzzzzzz.com/tags/Node/"}]},{"title":"SpringCloud学习笔记(九) Hystrix Dashboard","slug":"SpringCloud学习笔记(九)-Hystrix-Dashboard","date":"2020-03-02T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/springcloud-xue-xi-bi-ji-jiu-hystrix-dashboard/","link":"","permalink":"http://www.wzzzzzz.com/article/springcloud-xue-xi-bi-ji-jiu-hystrix-dashboard/","excerpt":"","text":"SpringCloud学习笔记(九) Hystrix Dashboard Hystrix Dashboard 配置 新建一个 Hystrix Dashboard 的微服务项目 pom org.springframework.cloud spring-cloud-netflix-hystrix-dashboard org.springframework.boot spring-boot-starter-actuator api com.fleawu 1.0-SNAPSHOT yml server: port: 9001 主启动类 @SpringBootApplication @EnableHystrixDashboard public class HystrixStart { public static void main(String[] args) { SpringApplication.run(HystrixStart.class, args); } } 所有微服务提供者都需要有监控依赖配置 启动 hystrix-dashboard 项目 访问：http://127.0.0.1:9001/hystrix ，出现如下图所示，表示环境配置成功 启动 eureka 注册中心（集群） 启动带有 hystrix 的服务提供者 访问带有 hystrix 的服务提供者的相关服务接口 访问带有 hystrix 的服务提供者的 http://127.0.0.1:7004/hystrix.stream 若出现如图所示解决办法 注册：HystrixMetricsStreamServlet @Bean public ServletRegistrationBean getServlet() { HystrixMetricsStreamServlet streamServlet = new HystrixMetricsStreamServlet(); ServletRegistrationBean registrationBean = new ServletRegistrationBean(streamServlet); registrationBean.setLoadOnStartup(1); registrationBean.addUrlMappings(\"/hystrix.stream\"); registrationBean.setName(\"HystrixMetricsStreamServlet\"); return registrationBean; } 打开 http://127.0.0.1:9001/hystrix 监测：http://127.0.0.1:7004/hystrix.stream 最终显示如下页面 七色、一圈、一线 Hystrix-dashboard是一款针对Hystrix进行实时监控的工具，通过Hystrix Dashboard我们可以在直观地看到各Hystrix Command的请求响应时间, 请求成功率等数据。但是只使用Hystrix Dashboard的话, 你只能看到单个应用内的服务信息, 这明显不够. 我们需要一个工具能让我们汇总系统内多个服务的数据并显示到Hystrix Dashboard上, 这个工具就是Turbine Turbine","categories":[],"tags":[{"name":"语言","slug":"语言","permalink":"http://www.wzzzzzz.com/tags/语言/"},{"name":"SpringCloud","slug":"SpringCloud","permalink":"http://www.wzzzzzz.com/tags/SpringCloud/"},{"name":"Hystrix","slug":"Hystrix","permalink":"http://www.wzzzzzz.com/tags/Hystrix/"}]},{"title":"SpringCloud学习笔记(八) Hystrix 熔断、降级","slug":"SpringCloud学习笔记(八)-Hystrix-熔断","date":"2020-02-29T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/springcloud-xue-xi-bi-ji-ba-hystrix-rong-duan/","link":"","permalink":"http://www.wzzzzzz.com/article/springcloud-xue-xi-bi-ji-ba-hystrix-rong-duan/","excerpt":"","text":"SpringCloud学习笔记(八) Hystrix 熔断、降级 Hystrix 熔断概念（对于服务提供者） 在微服务架构中，服务与服务之间通过远程调用的方式进行通信，一旦某个被调用的服务发生了故障，其依赖服务也会发生故障，此时就会发生故障的蔓延，最终导致系统瘫痪。Hystrix实现了断路器模式，当某个服务发生故障时，通过断路器的监控，给调用方返回一个错误响应，而不是长时间的等待，这样就不会使得调用方由于长时间得不到响应而占用线程，从而防止故障的蔓延。Hystrix具备服务降级、服务熔断、线程隔离、请求缓存、请求合并及服务监控等强大功能。 例如 Java 代码 判断是否出问题 if (不出问题) { 服务消费者正常调用 } else { // 出问题 走备选返回结果 } 使用：新建带有熔断的服务提供者 修改 pom.xml api com.fleawu 1.0-SNAPSHOT org.springframework.cloud spring-cloud-starter-netflix-eureka-client org.springframework.boot spring-boot-starter-actuator org.springframework.cloud spring-cloud-starter-netflix-hystrix 修改主启动类 @SpringBootApplication @EnableEurekaClient @EnableDiscoveryClient // 开启熔断 @EnableCircuitBreaker public class SellerStart { public static void main(String[] args) { SpringApplication.run(SellerStart.class, args); } } Controller 服务添加熔断处理 @RestController public class BookController { @Resource private BookService bookService; @GetMapping(value = \"/buy/book\") @HystrixCommand(fallbackMethod = \"erroBook\") public Book buyBook() { int a = 1 / 0; // 模拟服务提供者出错，给出备选解决方案给服务消费者 return bookService.sellBook(); } private Book erroBook() { return new Book().setName(\"error book\").setPrice(0).setCode(110); } } Hystrix 降级概念（对于服务消费者） ​ 服务消费者调用服务提供者调不通，服务消费者自己给自己一个备选方案 修改 api 模块中的 pom.xml org.springframework.cloud spring-cloud-starter-openfeign org.springframework.cloud spring-cloud-starter-netflix-hystrix 新增一个实现 FallbackFactory 接口的类 新建一个 BookServiceFallbackFactory 类（名字自定义），传入对应的接口， 实现 FallbackFactory 中的接口，对接口中的方法进行降级处理 【@Component】 必须添加 @Component public class BookServiceFallbackFactory implements FallbackFactory { @Override public BookService create(Throwable throwable) { // 服务消费者主动处理 return () -> new Book().setName(\"服务降级\").setPrice(10).setCode(119); } } 修改服务消费者接口 @FeignClient(value = \"PROVIDER\",fallbackFactory = BookServiceFallbackFactory.class) public interface BookService { @GetMapping(value = \"/buy/book\") Book sellBook(); } Maven 发布 jar 包 带有 feign 的服务消费者修改yml feign: hystrix: enabled: true 带有 feign 的服务消费者启动类修改 @SpringBootApplication @EnableEurekaClient @EnableFeignClients(basePackages = {\"com.fleawu\"})//扫描 @FeignClient 标记的类 @ComponentScan({\"com.flea\",\"com.fleawu\"})// 包括熔断实现类也要扫描进来 public class UserStart { public static void main(String[] args) { SpringApplication.run(UserStart.class, args); } } fallbackFactory 和 fallback 的区别","categories":[],"tags":[{"name":"语言","slug":"语言","permalink":"http://www.wzzzzzz.com/tags/语言/"},{"name":"SpringCloud","slug":"SpringCloud","permalink":"http://www.wzzzzzz.com/tags/SpringCloud/"}]},{"title":"SpringCloud学习笔记(七) Feign 负载均衡","slug":"SpringCloud学习笔记(七)-Feign-负载均衡","date":"2020-02-26T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/springcloud-xue-xi-bi-ji-qi-feign-fu-zai-jun-heng/","link":"","permalink":"http://www.wzzzzzz.com/article/springcloud-xue-xi-bi-ji-qi-feign-fu-zai-jun-heng/","excerpt":"","text":"SpringCloud学习笔记(七) Feign 负载均衡 一、概念 ​ Feign 是一个声明式的 Web 服务客户端，使得编写 Web 服务客户端变得非常容易 二、使用 新建 feign 项目（消费者）yml 相关配置 server: port: 8002 spring: application: name: consume eureka: client: service-url: defaultZone: http://eureka01:6001/eureka/,http://eureka02:6002/eureka/,http://eureka03:6003/eureka/ 修改 feign 项目（消费者）pom api com.fleawu 1.0-SNAPSHOT org.springframework.cloud spring-cloud-starter-netflix-eureka-client org.springframework.boot spring-boot-starter-web org.springframework.cloud spring-cloud-starter-ribbon org.springframework.cloud spring-cloud-starter-openfeign 修改公共 api 模块 pom org.springframework.cloud spring-cloud-starter-openfeign 公共 api 模块增加Service接口 /** PROVIDER：服务名称 **/ @FeignClient(\"PROVIDER\") public interface BookService { @GetMapping(value = \"/buy/book\") Book sellBook(); } 修改 feign 项目（消费者）主启动类 @SpringBootApplication() @EnableEurekaClient // basePackages = {\"com.fleawu\"} 为 API 模块中Service所在的包 @EnableFeignClients(basePackages = {\"com.fleawu\"}) public class UserStart { public static void main(String[] args) { SpringApplication.run(UserStart.class, args); } } 修改 feign 项目（消费者）Controller @RestController public class UserController { // API 模块中的接口 @Resource private BookService bookService; @GetMapping(value = \"/buybook\") public Book getuser() { return bookService.sellBook(); } } 测试 启动注册中心 eureka 启动服务提供者（PROVIDER）：服务提供者注册进注册中心 启动带有 feign 的服务消费者 访问127.0.0.1:8002/buybook -----&gt; 访问的是服务提供者的：127.0.0.1:7001/buy/book 接口","categories":[],"tags":[{"name":"语言","slug":"语言","permalink":"http://www.wzzzzzz.com/tags/语言/"},{"name":"SpringCloud","slug":"SpringCloud","permalink":"http://www.wzzzzzz.com/tags/SpringCloud/"}]},{"title":"SpringCloud学习笔记(六) Ribbon 负载均衡","slug":"SpringCloud学习笔记(六)-Ribbon-负载均衡","date":"2020-02-24T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/springcloud-xue-xi-bi-ji-liu-ribbon-fu-zai-jun-heng/","link":"","permalink":"http://www.wzzzzzz.com/article/springcloud-xue-xi-bi-ji-liu-ribbon-fu-zai-jun-heng/","excerpt":"","text":"SpringCloud学习笔记(六) Ribbon 负载均衡 环境配置 修改 pom 文件 org.springframework.cloud spring-cloud-starter-ribbon 修改 RestTemplate 配置类添加：@LoadBalanced @Configuration public class ConfigBean { @Bean @LoadBalanced public RestTemplate getRestTemplate() { return new RestTemplate(); } } 配置多个服务提供者 配置略 **注意：**Eureka注册同一个服务多个实例：instanceId 需不同 在application.propertis配置文件中配置参数eureka.instance.metadataMap.instanceId，不然可能注册到Eureka的相同服务的多个实例只有一个生效。 eureka.instance.metadataMap.instanceId: ${spring.application.name}:${random.value} 负载均衡 修改默认的轮询策略 @Bean @LoadBalanced public RestTemplate getRestTemplate() { return new RestTemplate(); } // 上面代码不变 @Bean public IRule ribbonRule() { return new RandomRule(); //随机 } ribbon 负载均衡策略： 策略类 命名 描述 RandomRule 随机策略 随机选择server RoundRobinRule 轮询策略 按顺序选择server RetryRule 重试策略 在一个配置时间段内当选择server不成功，则一直尝试选择一个可用的server BestAvailableRule 最低并发策略 逐个考察server，如果server断路器打开，则忽略，在选择其中并发链接最低的server AvailabilityFilteringRule 可用过滤策略 过滤掉一直链接失败并标记为circuit tripped的server，过滤掉哪些高并发链接 ResponseTimeWeightedRule 响应时间加权策略 根据server的响应时间分配权重。响应时间越长，权重越低，被选择到的概略就越低，权重越高，被选择到的概率就越高。 ZoneAvoidanceRule 区域权衡策略 综合判断server所在的区域的性能和server的可用性轮询选择server，并且判定一个AWS Zobe的运行性能是否可用，提出不可用的Zone中所有server。 自定义负载均衡策略 修改主启动类： @SpringBootApplication @EnableEurekaClient @RibbonClient(name = \"PROVIDER\",configuration = MyRule.class) public class UserStart { public static void main(String[] args) { SpringApplication.run(UserStart.class, args); } } @RibbonClient(name = “PROVIDER”,configuration = MyRule.class) name：需要调用的微服务名称 configuration：自定义负载均类；ps：该类需要实现 IRule 接口，并且不能放在 @ComponentScan 所扫描的当前包以及子包下（即不能放在主启动类的包及子包下） 创建 MyRule.class 类（先使用默认：RandomRule 配置） @Configuration public class MyRule { @Bean public IRule myRule() { return new RandomRule(); } } 注意： 以上配置不能和以下一块使用 @Bean public IRule ribbonRule() { return new RandomRule(); //随机 } 自定义负载均衡： /**自定义的负载均衡算法*/ public class MyRule extends AbstractLoadBalancerRule { // total = 0 // 当total==5以后，我们指针才能往下走， // index = 0 // 当前对外提供服务的服务器地址， // total需要重新置为零，但是已经达到过一个5次，我们的index = 1 // 分析：我们5次，但是微服务只有8001 8002 8003 三台，OK？ private int total = 0; // 总共被调用的次数，目前要求每台被调用5次 private int currentIndex = 0; // 当前提供服务的机器号 public Server choose(ILoadBalancer lb, Object key) { if (lb == null) { return null; } Server server = null; while (server == null) { if (Thread.interrupted()) { return null; } List upList = lb.getReachableServers(); List allList = lb.getAllServers(); int serverCount = allList.size(); if (serverCount == 0) { return null; } //private int total = 0; // 总共被调用的次数，目前要求每台被调用5次 //private int currentIndex = 0; // 当前提供服务的机器号 if (total < 5) { server = upList.get(currentIndex); total++; } else { total = 0; currentIndex++; if (currentIndex >= upList.size()) { currentIndex = 0; } } if (server == null) { Thread.yield(); continue; } if (server.isAlive()) { return (server); } server = null; Thread.yield(); } return server; } @Override public Server choose(Object key) { return choose(getLoadBalancer(), key); } @Override public void initWithNiwsConfig(IClientConfig clientConfig) { } }","categories":[],"tags":[{"name":"语言","slug":"语言","permalink":"http://www.wzzzzzz.com/tags/语言/"},{"name":"SpringCloud","slug":"SpringCloud","permalink":"http://www.wzzzzzz.com/tags/SpringCloud/"}]},{"title":"SpringCloud学习笔记(五) eureka集群","slug":"SpringCloud学习笔记(五)-eureka集群","date":"2020-02-23T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/springcloud-xue-xi-bi-ji-wu-eureka-ji-qun/","link":"","permalink":"http://www.wzzzzzz.com/article/springcloud-xue-xi-bi-ji-wu-eureka-ji-qun/","excerpt":"","text":"SpringCloud学习笔记(五) eureka集群 新建多个 eureka 项目 Todo 创建项目省略 修改 host 127.0.0.1 eureka01 127.0.0.1 eureka02 127.0.0.1 eureka03 修改 yaml 文件 server: port: 6001 eureka: instance: hostname: eureka01 #eureka 服务端的主机地址 修改 client: register-with-eureka: false fetch-registry: false service-url: defaultZone: http://eureka02:6002/eureka/,http://eureka03:6003/eureka/ #其他的eureka defaultZone zookeeper 和 eureka 相比 eureka 有什么优势 ​ zookeeper：cp 原则，强一致 + 分布式 ​ eureka：ap 原则，高可用 + 分布式","categories":[],"tags":[{"name":"语言","slug":"语言","permalink":"http://www.wzzzzzz.com/tags/语言/"},{"name":"SpringCloud","slug":"SpringCloud","permalink":"http://www.wzzzzzz.com/tags/SpringCloud/"}]},{"title":"SpringCloud学习笔记(四) eureka自我保护机制","slug":"SpringCloud学习笔记(四)-eureka自我保护机制","date":"2020-02-22T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/springcloud-xue-xi-bi-ji-si-eureka-zi-wo-bao-hu-ji-zhi/","link":"","permalink":"http://www.wzzzzzz.com/article/springcloud-xue-xi-bi-ji-si-eureka-zi-wo-bao-hu-ji-zhi/","excerpt":"","text":"SpringCloud学习笔记(四) eureka自我保护机制 自我保护机制： ​ （好死不如赖活着）某时刻某一个微服务不可用了，eureka 不会立刻清理，依旧会对该微服务的信息进行保存。 eureka是AP原则 如何禁用： ​ 在 eureka server 端的配置文件中添加： eureka.server.enable-self-preservation=false","categories":[],"tags":[{"name":"语言","slug":"语言","permalink":"http://www.wzzzzzz.com/tags/语言/"},{"name":"SpringCloud","slug":"SpringCloud","permalink":"http://www.wzzzzzz.com/tags/SpringCloud/"}]},{"title":"SpringCloud学习笔记(三) actuator与注册微服务信息完善","slug":"SpringCloud学习笔记(三)-actuator与注册微服务信息完善","date":"2020-02-21T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/springcloud-xue-xi-bi-ji-san-actuator-yu-zhu-ce-wei-fu-wu-xin-xi-wan-shan/","link":"","permalink":"http://www.wzzzzzz.com/article/springcloud-xue-xi-bi-ji-san-actuator-yu-zhu-ce-wei-fu-wu-xin-xi-wan-shan/","excerpt":"","text":"SpringCloud学习笔记(三) actuator与注册微服务信息完善 修改 yaml 文件： eureka: client: service-url: defaultZone: http://localhost:6001/eureka instance: # 新增 instance-id: provider_name #自定义服务名称信息 prefer-ip-address: true #服务路径可以显示ip地址 info 信息完善： Client 工程引入 actuator gav org.springframework.boot spring-boot-starter-actuator actuator：主管监控和信息配置 在父工程中修改build （对springboot 2.x无效，2.x 直接跳过） eureka_demo src/main/resources true org.apache.maven.plugins maven-resources-plugin $ Client yml 增加相关信息 info: app.name: provider_seller company.name: provider_seller_company_name build.artifactId: @project.artifactId@ #springboot 2.x 使用@动态获取，其他版本需根据具体情况调整 build.version: @project.version@","categories":[],"tags":[{"name":"语言","slug":"语言","permalink":"http://www.wzzzzzz.com/tags/语言/"},{"name":"SpringCloud","slug":"SpringCloud","permalink":"http://www.wzzzzzz.com/tags/SpringCloud/"}]},{"title":"SpringCloud学习笔记(二)eureka 环境配置","slug":"SpringCloud学习笔记(二)eureka","date":"2020-02-17T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/springcloud-xue-xi-bi-ji-er-eureka/","link":"","permalink":"http://www.wzzzzzz.com/article/springcloud-xue-xi-bi-ji-er-eureka/","excerpt":"","text":"SpringCloud学习笔记(二) eureka 环境配置 建立在无主pom的情况下 Eureka Server 配置: Pom.xml 配置 org.springframework.cloud spring-cloud-dependencies Finchley.RELEASE org.springframework.cloud spring-cloud-starter-netflix-eureka-server 启动类配置 @SpringBootApplication @EnableEurekaServer //开启EurekaServer public class EurekaStart { public static void main(String[] args) { SpringApplication.run(EurekaStart.class, args); } } yml 配置 server: port: 6001 eureka: instance: hostname: eurekaDemo #eureka 服务端的实例名称 client: register-with-eureka: false #false 表示不向注册中心注册自己 fetch-registry: false #false 表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务 service-url: defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka Eureka client 配置: Pom.xml 配置 org.springframework.cloud spring-cloud-dependencies Finchley.RELEASE org.springframework.cloud spring-cloud-starter-netflix-eureka-client 启动类配置 @SpringBootApplication @EnableEurekaClient //开启 eureka 客户端 public class SellerStart { public static void main(String[] args) { SpringApplication.run(SellerStart.class, args); } } yml 配置 server: port: 7001 spring: application: name: provider eureka: client: service-url: defaultZone: http://localhost:6001/eureka 建立在有主pom的情况下 Eureka Server 配置: 主 pom 配置 org.springframework.cloud spring-cloud-dependencies Finchley.RELEASE pom import Eureka Server pom 配置 org.springframework.cloud spring-cloud-starter-netflix-eureka-server Eureka Server 启动类配置 @SpringBootApplication @EnableEurekaServer //开启 eureka 客户端 public class EurekaStart { public static void main(String[] args) { SpringApplication.run(EurekaStart.class, args); } } Eureka Server yml 配置 server: port: 6001 eureka: instance: hostname: eurekaDemo #eureka 服务端的实例名称 client: register-with-eureka: false #false 表示不向注册中心注册自己 fetch-registry: false #false 表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务 service-url: defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka Eureka client pom 配置 org.springframework.cloud spring-cloud-starter-netflix-eureka-client Eureka clinet 启动类配置 @SpringBootApplication @EnableEurekaClient public class SellerStart { public static void main(String[] args) { SpringApplication.run(SellerStart.class, args); } } Eureka clinet yml 配置 server: port: 7001 spring: application: name: provider eureka: client: service-url: defaultZone: http://localhost:6001/eureka","categories":[],"tags":[{"name":"语言","slug":"语言","permalink":"http://www.wzzzzzz.com/tags/语言/"},{"name":"SpringCloud","slug":"SpringCloud","permalink":"http://www.wzzzzzz.com/tags/SpringCloud/"}]},{"title":"SpringCloud学习笔记(一)","slug":"SpringCloud学习笔记(一)","date":"2020-02-15T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/springcloud-xue-xi-bi-ji-yi/","link":"","permalink":"http://www.wzzzzzz.com/article/springcloud-xue-xi-bi-ji-yi/","excerpt":"","text":"SpringCloud学习笔记(一) 学习网站 https://www.springcloud.cc/ 搭建两个应用之间使用 RestTemplate 调用 配置类： @Configuration public class ConfigBean { @Bean public RestTemplate getRestTemplate() { return new RestTemplate(); } } Controller： @RestController public class UserController { @Resource private RestTemplate restTemplate; @GetMapping(value = \"/buybook\") public Book getuser() { return restTemplate.getForObject(\"http://127.0.0.1:7001/buy/book\", Book.class); } } RestTemplate 底层原理是 http调用","categories":[],"tags":[{"name":"语言","slug":"语言","permalink":"http://www.wzzzzzz.com/tags/语言/"},{"name":"SpringCloud","slug":"SpringCloud","permalink":"http://www.wzzzzzz.com/tags/SpringCloud/"}]},{"title":"用Docker搭建Nexus私服","slug":"用Docker搭建Nexus私服","date":"2020-02-14T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/yong-docker-da-jian-nexus-si-fu/","link":"","permalink":"http://www.wzzzzzz.com/article/yong-docker-da-jian-nexus-si-fu/","excerpt":"","text":"用Docker搭建Nexus私服 搜索镜像 docker search nexus 拉取镜像 docker pull sonatype/nexus3 创建Nexus数据文件的挂载目录 mkdir /home/nexus 通过Nexus镜像创建Nexus容器并运行 docker run -itd -p 8081:8081 --name nexus --restart always -v /home/nexus:/nexus-data sonatype/nexus3 查看是否已经启动 docker ps -a 查看日志是否正常 docker logs nexus容器Id 若出现报错日志，将宿主机中的文件夹目录权限修改 chmod 777 /home/nexus 访问 nexus 页面 http://ip地址:8081/","categories":[],"tags":[{"name":"docker","slug":"docker","permalink":"http://www.wzzzzzz.com/tags/docker/"},{"name":"环境搭建","slug":"环境搭建","permalink":"http://www.wzzzzzz.com/tags/环境搭建/"}]},{"title":"私有maven仓库的搭建(nexus)","slug":"私有maven仓库的搭建(nexus)","date":"2020-02-13T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/si-you-maven-cang-ku-de-da-jian-nexus/","link":"","permalink":"http://www.wzzzzzz.com/article/si-you-maven-cang-ku-de-da-jian-nexus/","excerpt":"","text":"私有Maven仓库的搭建 下载 nexus 压缩包 wget http://download.sonatype.com/nexus/3/nexus-3.7.1-02-unix.tar.gz 解压nexus安装包 tar zxvf nexus-3.7.1-02-unix.tar.gz 配置nexus的环境变量 vim /etc/profile 在profile文件的最底下加上这两行 export MAVEN_HOME=/usr/software/nexus-3.7.1-02 export PATH=$PATH:$MAVEN_HOME/bin 注：MAVEN_HOME的地址指向刚刚解压的地址 保存profile文件，并刷新 source /etc/profile 启动nexus服务 nexus start","categories":[],"tags":[{"name":"环境搭建","slug":"环境搭建","permalink":"http://www.wzzzzzz.com/tags/环境搭建/"}]},{"title":"Nexus 使用","slug":"Nexus-使用","date":"2020-02-12T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/nexus-shi-yong/","link":"","permalink":"http://www.wzzzzzz.com/article/nexus-shi-yong/","excerpt":"","text":"Nexus 使用 创建 Blob 存储 创建仓库 配置server release_user admin nexus123456 snapshot_user admin nexus123456 在 Java 项目 pom 中添加 release_user Release Deploy http://101.133.169.16:8081/repository/maven-releases/ 注意事项 发jar包的版本不能是：SNAPSHOT结尾 从私服拉取jar包 developer jdk-1.8 nexus local private nexus http://101.133.169.16:8081/repository/maven-public/ true true nexus local private nexus http://101.133.169.16:8081/repository/maven-public/ true true 参见","categories":[],"tags":[{"name":"Nexus使用","slug":"Nexus使用","permalink":"http://www.wzzzzzz.com/tags/Nexus使用/"}]},{"title":"Axios 使用","slug":"Axios-使用","date":"2020-02-11T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/axios-shi-yong/","link":"","permalink":"http://www.wzzzzzz.com/article/axios-shi-yong/","excerpt":"","text":"Axios 使用 get 和 post 传参","categories":[],"tags":[{"name":"axios","slug":"axios","permalink":"http://www.wzzzzzz.com/tags/axios/"}]},{"title":"Java9 基础内容","slug":"Java9-基础内容","date":"2020-02-11T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/java9-ji-chu-nei-rong/","link":"","permalink":"http://www.wzzzzzz.com/article/java9-ji-chu-nei-rong/","excerpt":"","text":"Java9 基础内容 JEP：jdk enhancement proposals =&gt; jdk 改进提案，一种非正式的规范 JSR：Java","categories":[],"tags":[{"name":"语言","slug":"语言","permalink":"http://www.wzzzzzz.com/tags/语言/"}]},{"title":"Vue学习（二）脚手架目录结构说明","slug":"Vue学习（二）脚手架目录结构说明","date":"2020-02-10T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/vue-xue-xi-er-jiao-shou-jia-mu-lu-jie-gou-shuo-ming/","link":"","permalink":"http://www.wzzzzzz.com/article/vue-xue-xi-er-jiao-shou-jia-mu-lu-jie-gou-shuo-ming/","excerpt":"","text":"Vue学习（二）脚手架目录结构说明 脚手架目录示意图： 目录结构说明： 一级目录: build： webpack 配置相关的目录 config： webpack 配置相关的目录 node_modules：npm install 安装的依赖代码库 src：我们存放的源码，我们开发的所有代码都放在src目录下。 staic：存放一些第三方静态资源的目录 test：测试目录，没有太大用处，可以删除 一级文件: .babelrc：babel的一些配置，（将es6编译成es5的一些配置） .editorconfig：编辑器的一些配置（包括编码格式，缩进风格，换行格式） .eslintignore：配置我们不会对build文件和config文件进行语法检查。 .eslintrc.js：eslint的配置文件，主要是定义一些代码编写风格的规则。 .gitignore：配置git仓库忽略的一些文件（不会上传） index.html： 入口html 文件。 package.json：项目的一些配置信息（项目的一些具体信息） src 文件夹下: assets 文件夹： 存放静态资源，例如：图片，font字体等。 conponents 文件夹： 存放组件，里面你可以在建文件来分组件，比如建 header 问价夹， footer 文件夹 router 文件夹： 配置路由文件 App.vue 文件： App.vue是我们的主组件，所有页面都是在App.vue下进行切换的 main.js 文件：主要作用是初始化vue实例并使用需要的插件","categories":[],"tags":[{"name":"Vue脚手架","slug":"Vue脚手架","permalink":"http://www.wzzzzzz.com/tags/Vue脚手架/"},{"name":"配置","slug":"配置","permalink":"http://www.wzzzzzz.com/tags/配置/"}]},{"title":"抓包工具Proxyman使用","slug":"抓包工具Proxyman使用","date":"2020-02-10T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/zhua-bao-gong-ju-proxyman-shi-yong/","link":"","permalink":"http://www.wzzzzzz.com/article/zhua-bao-gong-ju-proxyman-shi-yong/","excerpt":"","text":"抓包工具Proxyman使用 打开开启抓包证书安装 手机抓包","categories":[],"tags":[{"name":"效率","slug":"效率","permalink":"http://www.wzzzzzz.com/tags/效率/"},{"name":"抓包","slug":"抓包","permalink":"http://www.wzzzzzz.com/tags/抓包/"}]},{"title":"Chrome 插件开发(二)manifest.json配置","slug":"Chrome-插件开发(二)manifest.json配置","date":"2020-02-09T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/chrome-cha-jian-kai-fa-er-manifest.json-pei-zhi/","link":"","permalink":"http://www.wzzzzzz.com/article/chrome-cha-jian-kai-fa-er-manifest.json-pei-zhi/","excerpt":"","text":"Chrome 插件开发(二)manifest.json配置 manifest.json 配置说明： { \"manifest_version\": 2, \"name\": \"插件名称\", \"description\": \"插件描述\", \"version\": \"1.0.0\", \"background\": { \"scripts\": [ \"js/axios.min.js\", \"js/background.js\" ] }, \"permissions\": [ \"contextMenus\", \"tabs\", \"cookies\", \"storage\", \"*://*/*\" ], \"content_scripts\": [ { \"matches\": [ \"*://star.toutiao.com/*\" ], \"js\": [ \"js/axios.min.js\", \"js/contentscripts.js\" ], \"run_at\": \"document_end\" } ], \"browser_action\": { \"default_icon\": \"logo.png\", \"default_title\": \"插件描述\", \"default_popup\": \"popup.html\" }, \"content_security_policy\": \"script-src 'self' 'unsafe-eval'; object-src 'self'\" }","categories":[],"tags":[{"name":"脚本","slug":"脚本","permalink":"http://www.wzzzzzz.com/tags/脚本/"},{"name":"插件","slug":"插件","permalink":"http://www.wzzzzzz.com/tags/插件/"}]},{"title":"Docker 安装redis（配置启动）","slug":"Docker-安装redis（配置启动）","date":"2020-02-09T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/docker-an-zhuang-redis-pei-zhi-qi-dong/","link":"","permalink":"http://www.wzzzzzz.com/article/docker-an-zhuang-redis-pei-zhi-qi-dong/","excerpt":"","text":"Docker 安装redis（配置启动） 拉取 redis 镜像 docker pull redis 创建redis.conf和相应的文件夹 redis官方配置文件 记得修改 bind，直接注释或bind 0.0.0.0 启动redis docker run -d -p 6379:6379 \\ --name redis \\ -v /home/config/redis/redis.conf:/etc/redis/redis.conf \\ -v /home/data/redis:/data \\ redis \\ redis-server /etc/redis/redis.conf --appendonly yes","categories":[],"tags":[{"name":"环境搭建","slug":"环境搭建","permalink":"http://www.wzzzzzz.com/tags/环境搭建/"},{"name":"redis安装","slug":"redis安装","permalink":"http://www.wzzzzzz.com/tags/redis安装/"}]},{"title":"Vue学习（一）使用Vue脚手架创建Vue项目","slug":"Vue-使用Vue脚手架创建Vue项目","date":"2020-02-09T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/vue-shi-yong-vue-jiao-shou-jia-chuang-jian-vue-xiang-mu/","link":"","permalink":"http://www.wzzzzzz.com/article/vue-shi-yong-vue-jiao-shou-jia-chuang-jian-vue-xiang-mu/","excerpt":"","text":"Vue学习（一）使用Vue脚手架创建Vue项目 安装 node 环境 安装 npm 安装 vue npm install -g vue-cli 初始化vue脚手架 vue init webpack 项目名 选择配置 配置说明 # 项目名称 ? Project name y # 项目描述 ? Project description vue脚手架学习vue # 作者邮箱 ? Author zaydanwu@gmail.com # ? Vue build standalone # 是否安装 vue-router ? Install vue-router? Yes # ? Use ESLint to lint your code? Yes # 选择一个 eslint 标准，Airbnb ? Pick an ESLint preset Standard # 是否安装单元测试 ? Set up unit tests Yes # 选择jtest ? Pick a test runner jest ? Setup e2e tests with Nightwatch? Yes ? Should we run `npm install` for you after the project has been created? (recommended) npm 安装成功","categories":[],"tags":[{"name":"环境搭建","slug":"环境搭建","permalink":"http://www.wzzzzzz.com/tags/环境搭建/"},{"name":"Vue脚手架","slug":"Vue脚手架","permalink":"http://www.wzzzzzz.com/tags/Vue脚手架/"}]},{"title":"Docker部署jar包","slug":"Docker部署jar包","date":"2020-02-04T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/docker-bu-shu-jar-bao/","link":"","permalink":"http://www.wzzzzzz.com/article/docker-bu-shu-jar-bao/","excerpt":"","text":"Docker部署jar包 方式一： 这种方式就是运行一个jdk的容器，然后挂载其中的目录到宿主机，然后运行之后，就可以将需要运行的jar放在宿主机的挂载目录下，然后每次重新运行docker容器即可。不用每次发布需要重新构建docker容器，只需要替换宿主机中的jar包即可 docker 拉取 jdk 镜像 docker pull openjdk 准备jar包 关联宿主机含有jar包的文件夹和容器中的文件夹 docker run -d \\ --restart=always \\ -v /home/codes/deploy/jar:/jar -v /var/log/redis:/var/log/redis \\ -p 5678:5678 \\ --name redis_jar openjdk \\ /usr/bin/java -jar \\ /jar/redis.jar # -d 后台运行 # --restart=always 这个表示docker容器在停止重新启动或服务器开机之后，镜像会自动重新启动 # -v 挂载目录 # --name 别名 # openjdk 容器名 # /usr/bin/java -jar 启动jar包 # /jar/redis.jar 镜像中的jar包 更新jar包 只需要将新的jar包，拷贝到挂载目录，重启镜像 方式二： 制作脚本，通过镜像每次执行脚本，通过脚本去执行更新后的jar包（需要挂载目录） 编写脚本 java -jar /demo/redis.sh 编写Dockerfile FROM java:8 EXPOSE 5678 ENTRYPOINT [\"sh\",\"/demo/redis.sh\"] 将jar包和脚本放置在同一目录下 执行docker命令 docker run -d --name redis1 \\ -it \\ -v /home/codes/deploy/demo:/demo -v /var/log/redis/:/var/log/redis/ -p 5678:5678 redis_demo","categories":[],"tags":[{"name":"环境搭建","slug":"环境搭建","permalink":"http://www.wzzzzzz.com/tags/环境搭建/"}]},{"title":"Chrome 插件开发(一)基础知识了解","slug":"Chrome-插件开发(一)基础知识了解","date":"2020-01-31T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/chrome-cha-jian-kai-fa-yi-ji-chu-zhi-shi-liao-jie/","link":"","permalink":"http://www.wzzzzzz.com/article/chrome-cha-jian-kai-fa-yi-ji-chu-zhi-shi-liao-jie/","excerpt":"","text":"Chrome 插件开发(一)基础知识了解 编辑扩展程序所需要的主要文件夹 ./ ├─ manifest.json //扩展的配置项 ├─ Custom.js //自定义js脚本 ├─ Custom.css //自定义css样式 ├─ icon.png //扩展程序的icon └─ popup.html //扩展的展示弹窗 1.popup 用户鼠标点击插件图标弹出的界面 popup.html 对应的js：叫 popup.js（自定义js脚本，可以叫别的名称） Chrome 开发注意事项： https://www.jianshu.com/p/6422a1c4b6f2 https://segmentfault.com/a/1190000020525962?utm_source=tag-newest http://blog.haoji.me/chrome-plugin-develop.html e.g.: https://github.com/spademan/get-cookie-in-chrome https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html 较详细的文档： https://github.com/sxei/chrome-plugin-demo chrome插件消息交互： https://blog.csdn.net/summerxiachen/article/details/78698878 webstorm 设置chrome提示 1. 打开Settings对话框（File&gt; Settings） 2. 点击Languages &amp; Frameworks&gt; Javascript&gt;Libraries 3. 点击 Download 4. 确保TypeScript community stubs已选中 5. chrome从列表中选择（只需键入即可快速找到它chrome） 6. 点击 Download and Install 7. 点击OK关闭设置对话框","categories":[],"tags":[{"name":"脚本","slug":"脚本","permalink":"http://www.wzzzzzz.com/tags/脚本/"},{"name":"插件","slug":"插件","permalink":"http://www.wzzzzzz.com/tags/插件/"}]},{"title":"Centos7 安装jdk 11","slug":"Centos7-安装jdk-11","date":"2020-01-29T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/centos7-an-zhuang-jdk-11/","link":"","permalink":"http://www.wzzzzzz.com/article/centos7-an-zhuang-jdk-11/","excerpt":"","text":"Centos7 安装jdk 11 首先搜索可安装的 JDK sudo yum search java-11 搜索结果 =========================================================================================== N/S matched: java-11 =========================================================================================== java-11-openjdk.i686 : OpenJDK Runtime Environment 11 java-11-openjdk.x86_64 : OpenJDK Runtime Environment 11 java-11-openjdk-debug.i686 : OpenJDK Runtime Environment 11 with full debug on java-11-openjdk-debug.x86_64 : OpenJDK Runtime Environment 11 with full debug on java-11-openjdk-demo.i686 : OpenJDK Demos 11 java-11-openjdk-demo.x86_64 : OpenJDK Demos 11 java-11-openjdk-demo-debug.i686 : OpenJDK Demos 11 with full debug on java-11-openjdk-demo-debug.x86_64 : OpenJDK Demos 11 with full debug on java-11-openjdk-devel.i686 : OpenJDK Development Environment 11 java-11-openjdk-devel.x86_64 : OpenJDK Development Environment 11 java-11-openjdk-devel-debug.i686 : OpenJDK Development Environment 11 with full debug on java-11-openjdk-devel-debug.x86_64 : OpenJDK Development Environment 11 with full debug on java-11-openjdk-headless.i686 : OpenJDK Headless Runtime Environment 11 java-11-openjdk-headless.x86_64 : OpenJDK Headless Runtime Environment 11 java-11-openjdk-headless-debug.i686 : OpenJDK Runtime Environment with full debug on java-11-openjdk-headless-debug.x86_64 : OpenJDK Runtime Environment with full debug on java-11-openjdk-javadoc.i686 : OpenJDK 11 API documentation java-11-openjdk-javadoc.x86_64 : OpenJDK 11 API documentation java-11-openjdk-javadoc-debug.i686 : OpenJDK 11 API documentation for packages with debug on java-11-openjdk-javadoc-debug.x86_64 : OpenJDK 11 API documentation for packages with debug on java-11-openjdk-javadoc-zip.i686 : OpenJDK 11 API documentation compressed in single archive java-11-openjdk-javadoc-zip.x86_64 : OpenJDK 11 API documentation compressed in a single archive java-11-openjdk-javadoc-zip-debug.i686 : OpenJDK 11 API documentation compressed in single archive for packages with debug on java-11-openjdk-javadoc-zip-debug.x86_64 : OpenJDK 11 API documentation compressed in a single archive for packages with debug on java-11-openjdk-jmods.i686 : JMods for OpenJDK 11 java-11-openjdk-jmods.x86_64 : JMods for OpenJDK 11 java-11-openjdk-jmods-debug.i686 : JMods for OpenJDK 11 with full debug on java-11-openjdk-jmods-debug.x86_64 : JMods for OpenJDK 11 with full debug on java-11-openjdk-src.i686 : OpenJDK Source Bundle 11 java-11-openjdk-src.x86_64 : OpenJDK Source Bundle 11 java-11-openjdk-src-debug.i686 : OpenJDK Source Bundle 11 for packages with debug on java-11-openjdk-src-debug.x86_64 : OpenJDK Source Bundle 11 for packages with debug on yum 安装 yum install java-11-openjdk.x86_64 安装的路径 cd /usr/lib/jvm 查看安装的版本 java -version","categories":[],"tags":[{"name":"环境搭建","slug":"环境搭建","permalink":"http://www.wzzzzzz.com/tags/环境搭建/"}]},{"title":"Lua 学习","slug":"Lua-学习","date":"2020-01-24T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/lua-xue-xi/","link":"","permalink":"http://www.wzzzzzz.com/article/lua-xue-xi/","excerpt":"","text":"Lua 环境安装 curl -R -O http://www.lua.org/ftp/lua-5.3.5.tar.gz tar zxf lua-5.3.5.tar.gz cd lua-5.3.5 make linux test #报错执行 yum install libtermcap-devel ncurses-devel libevent-devel readline-devel make install 出现如图所示，表示安装成功","categories":[],"tags":[{"name":"脚本","slug":"脚本","permalink":"http://www.wzzzzzz.com/tags/脚本/"}]},{"title":"IaaS，PaaS，SaaS 的区别","slug":"IaaS，PaaS，SaaS 的区别","date":"2020-01-14T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/iaas-paas-saas-de-qu-bie/","link":"","permalink":"http://www.wzzzzzz.com/article/iaas-paas-saas-de-qu-bie/","excerpt":"","text":"IaaS，PaaS，SaaS 的区别 IaaS：基础设施服务 ​ 例如：提供基础生产工具，（卖加工原材料的工具的） PaaS：平台服务 ​ 例如：不仅提供原材料加工工具，又提供加工原材料服务（你只需要提供原材料） SaaS：软件即服务 ​ 例如：你无需做任何事情，就可以获取到产品","categories":[],"tags":[{"name":"名词解释","slug":"名词解释","permalink":"http://www.wzzzzzz.com/tags/名词解释/"},{"name":"专业名词","slug":"专业名词","permalink":"http://www.wzzzzzz.com/tags/专业名词/"}]},{"title":"工作总结模板","slug":"年终总结模板","date":"2020-01-09T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/nian-zhong-zong-jie-mo-ban/","link":"","permalink":"http://www.wzzzzzz.com/article/nian-zhong-zong-jie-mo-ban/","excerpt":"","text":"工作总结模板 [toc] 总体框架目录 单独一张PPT，把一些要讲的内容罗列出来 第一部分 简述今年的主要工作重心 快速回顾今年工作重心，如果有必要，也应该对比去年。 第二部分 都做了哪些具体的事情 事情 1：做到什么样，我的作用，产出了什么，价值是什么… 事情 2：做到什么样，我的作用，产出了什么，价值是什么… 事情 3：做到什么样，我的作用，产出了什么，价值是什么… 事情 4：… 还曾受到同事肯定/客户表扬/用户认可，如果自己觉得好意思，脸上贴点金也无妨，佐证自己工作的成效。 第三部分 问题和遗憾的部分 某个工作目标 ：没怎么做好，原因是…尽量客观，理性，尤其注意别推脱责任。 第四部分 自我评定 自己认为的绩效应该是… 主要理由和原因是… 第五部分 明年的工作计划 明年，学习管理技能/学习新技术/探索新的业务领域…","categories":[],"tags":[{"name":"工作","slug":"工作","permalink":"http://www.wzzzzzz.com/tags/工作/"}]},{"title":"JAVA 调用浏览器获取数据","slug":"JAVA-调用浏览器获取数据","date":"2020-01-03T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/java-diao-yong-liu-lan-qi-huo-qu-shu-ju/","link":"","permalink":"http://www.wzzzzzz.com/article/java-diao-yong-liu-lan-qi-huo-qu-shu-ju/","excerpt":"","text":"JAVA 调用浏览器获取页面中的数据 //调用浏览器 WebDriver webDriver = new ChromeDriver(); webDriver.get(\"https://s.click.taobao.com/t?e=m%3D2%26s%3DtrHIghuGQt1w4vFB6t2Z2ueEDrYVVa64XoO8tOebS%2BdRAdhuF14FMQ03gou%2BipfClovu%2FCElQOvickge4xxVNR9dy868BwtVVbV2OUE6VFIEUwKUjNqrT2U%2FUaldK2D4grXFxOS2hWW5j1IKE4qwcAtkyqhBb5%2B4HoaaUnJGJVMk6A8vppGneNAxZcmeIBxWj3Mk01PT8yxtL2w68yOxvE9RNdF9PG1054D9O%2FIWQ4%2BVlMEqA3PwTyB4b8xwNKLSxg5p7bh%2BFbQ%3D&union_lens=lensId:0bb39b78_1875_16b0def307e_aa33\"); String currentUrl = webDriver.getCurrentUrl(); System.out.println(currentUrl); //代理请求 OkHttpClient okHttpClient = new OkHttpClient(); Request.Builder builder = new Request.Builder(); builder.url(\"xx\"); builder.get(); Request request = builder.build(); String string = Objects.requireNonNull(okHttpClient.newCall(request).execute().body()).string(); JSONObject jsonObject = JSONObject.parseObject(string); JSONArray data = jsonObject.getJSONArray(\"data\"); JSONObject object = (JSONObject) data.get(0); String ip = object.getString(\"ip\"); Integer port = object.getInteger(\"port\"); String httpProxy = String.join(\":\", ip, port + \"\"); ChromeOptions chromeOptions = new ChromeOptions(); Proxy proxy = new Proxy(); proxy.setHttpProxy(httpProxy); chromeOptions.setProxy(proxy); System.out.println(httpProxy); chromeOptions.addArguments(\"headless\"); chromeOptions.addArguments(\"no-sandbox\"); WebDriver webDriver = new ChromeDriver(chromeOptions); webDriver.get(\"https://s.click.taobao.com/t?e=m%3D2%26s%3DtrHIghuGQt1w4vFB6t2Z2ueEDrYVVa64XoO8tOebS%2BdRAdhuF14FMQ03gou%2BipfClovu%2FCElQOvickge4xxVNR9dy868BwtVVbV2OUE6VFIEUwKUjNqrT2U%2FUaldK2D4grXFxOS2hWW5j1IKE4qwcAtkyqhBb5%2B4HoaaUnJGJVMk6A8vppGneNAxZcmeIBxWj3Mk01PT8yxtL2w68yOxvE9RNdF9PG1054D9O%2FIWQ4%2BVlMEqA3PwTyB4b8xwNKLSxg5p7bh%2BFbQ%3D&union_lens=lensId:0bb39b78_1875_16b0def307e_aa33\"); String currentUrl = webDriver.getCurrentUrl(); System.out.println(currentUrl);","categories":[],"tags":[{"name":"爬虫","slug":"爬虫","permalink":"http://www.wzzzzzz.com/tags/爬虫/"}]},{"title":"微信开发 Java","slug":"微信开发 Java","date":"2020-01-02T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/wei-xin-kai-fa-java/","link":"","permalink":"http://www.wzzzzzz.com/article/wei-xin-kai-fa-java/","excerpt":"","text":"微信开发 Java 1. 服务号Java服务端开发 $\\underline{需要的数据:}$ 服务号的appId、appSecret 用于获取 AccessToken 获取公众号用户信息地址 获取AccessToken的地址信息 配置回调信息方法 编写一个Controller @PostMapping(value = \"/gzh/callback\", produces = \"text/html;charset=UTF-8\") public void callback(HttpServletRequest request, HttpServletResponse response) { // 1.接受微信回调返回的信息，request 中 // 2.解析 request 中的数据，保存用户信息 // 3.响应对应的信息给微信 } 微信服务号响应的信息 1578023225 1148080904028422144 公众号二维码带参数开发 公众号回调中的参数为：EventKey（自定义参数信息） 关注公众号回复多条信息 被动回复消息（格式需要 XML） 主动发送消息：直接调用接口发送信息（格式需要 JSON） 小程序授权开发 $\\underline{需要的数据:}$ 小程序的appId、appSecret 用于获取 AccessToken 获取AccessToken的地址 登录凭证校验地址(获取session_key) 发送消息客服消息地址 上传素材地址 获取用户信息**（需要前端将相关的用户信息返回给我后端接口）** 传入的参数： avatarUrl: \"https://wx.qlogo.cn/mmopen/vi_32/dpzd3qFvabQ2HRcQWloFHyyWSZTUKcUQfbwkJvYfp2icS0IBGFj0W0Bxv3JmfDrMgbnDVwfiaemDkOq70G2BKS4A/132\" city: \"Hangzhou\" # code 用于调用接口获取 session_key code: \"033rAYt21RzvLQ1Yhdv21xqIt21rAYtm\" country: \"China\" device: \"iPhone 6/7/8 Plus\" encryptData: \"8TT5cvhq2OU62V4/yZE39QBLRqN8JtK03zWl1bKmqt0OMYxMWkzKX9DhcnS5RTWK0EPNH19s1EbaIH8nvO5kCQAPiBAoPUJFvcr7eIZGFv04iNFpZ7syBB7YS2M079rwmUTLM+HZB6eQmCDfDGJgTMOqmPHapu8UW2Xm1Qyf246QqzG6UZfdYx9GseXtDCzymOSfDW6UJiAKdxGdcQzSI2NRsQ1P2eDParY4loy3dGqRRSZLNJbULjIZV8sl855B/ZNaIid42JsdKIQyy9H6a1LlnNyJtQein+pIuGhhaCZscsdk9gUuyHhCufv0QHP87bmLDb+DxbeGIrVrGvQbuC3oN47NQo1wtaFhT5S/8zrl5hH578tWZSoflG+GmUppaaOqjQHtKKfsWv68+5fe5id3wgOf2gOUFyVqxD6UXiCaUtXRhAjXHnbBttL+e97CoHbUayPCC2x7oYjUcyVlKjF1Lwq85yDnyyB9VGO9Z01itgkz6hoU6A0vB3Adfuz0votTopvP0qGeaeaipSynWg==\" gender: 2 iv: \"0tWYuyZ/MmyUHRKTutZhDA==\" nickName: \"BROKEN\" province: \"Zhejiang\" type: 1000 iv + session_key + 算法能解密：encryptData 中的数据（unionId 等） 算法： public class AESUtils { private String sessionKey; private String encryptedData; private String iv; public AESUtils(String sessionKey, String encryptedData, String iv) { this.sessionKey = sessionKey; this.encryptedData = encryptedData; this.iv = iv; } // 解密方法 public String decrypt() throws Exception { byte[] sessionKeyByte = Base64.decode(sessionKey); byte[] encryptedDataByte = Base64.decode(encryptedData); byte[] ivByte = Base64.decode(iv); initialize(); Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS7Padding\"); Key sKeySpec = new SecretKeySpec(sessionKeyByte, \"AES\"); cipher.init(Cipher.DECRYPT_MODE, sKeySpec, generateIV(ivByte)); //可以根据appid来判断是不是正确的结果 return new String(cipher.doFinal(encryptedDataByte)); } } 授权手机号（参数由前端传入） iv + session_key + 算法能解密：encryptData 中的数据（ phoneNumber ）同上 1. encryptData 解密后的数据为： { \"phoneNumber\": \"13580006666\", \"purePhoneNumber\": \"13580006666\", \"countryCode\": \"86\", \"watermark\": { \"appid\":\"APPID\", \"timestamp\": TIMESTAMP } } 小程序客服消息 配置回调 @GetMapping(value = \"/xcx/msg/callback\") public void wechatService(PrintWriter out, HttpServletResponse response, @RequestParam(value = \"signature\", required = false) String signature, @RequestParam String timestamp, @RequestParam String nonce, @RequestParam String echostr) { logger.error(\"回复微信消息成功：微信返回的信息：signature:{},timestamp:{},nonce:{},echostr:{}\",signature, timestamp, nonce, echostr); //原模原样将 echostr 字段返回 out.print(echostr); } 微信小程序后台配置 处理小程序回调信息 @PostMapping(value = \"/xcx/msg/callback\", produces = \"text/html;charset=UTF-8\") public void xcxMessageCallback(HttpServletRequest request, HttpServletResponse response){ // 1.接受微信小程序回调返回的信息，request 中 // 2.解析 request 中的数据，处理相关业务逻辑 // 处理小程序客服消息，回复图片等 // 3.响应对应的信息给微信 } 客服消息中回复用户图片（公众号回复多条消息也可以，accesstoken 换成公众号的） 当客服消息中接收到用户消息是指定的内容时，回复对应的消息 将对应的消息封装成固定的消息模板（参考小程序客服消息模板） 将封装好的模板消息，post 发送 /** * message 封装好的消息模板 */ private void sendMessage(String message) { String accessToken = \"对应的accessToken\" String url = \"https://api.weixin.qq.com/cgi-bin/message/custom/send?access_token=\" + accessToken; try { logger.info(\"发送客服消息为：{}\", message); httpClientInstance.post(url, message); } catch (Exception e) { logger.error(\"发送客服消息失败，msg:{}\", e.getMessage(), e); } } 进入小程序客服消息回调返回信息： { \"ToUserName\": \"gh_15ac53a8de4b\", \"FromUserName\": \"o7UjF5N_0mWTa3ydAX3A9uB-drEE\", \"CreateTime\": 1573648702, \"MsgType\": \"event\", \"Event\": \"user_enter_tempsession\", \"SessionFrom\": \"wxapp\" } 客服消息中发送微信小程序回调返回的信息： { \"ToUserName\": \"gh_15ac53a8de4b\", \"FromUserName\": \"o7UjF5E50p5Voyl-zLjtmbE_HLKY\", \"CreateTime\": 1573648780, \"MsgType\": \"miniprogrampage\", \"MsgId\": 22529232614406832, \"Title\": \"小程序名称\", \"AppId\": \"wx1cc77f731857276c\", \"PagePath\": \"pages/order/order\", \"ThumbUrl\": \"http://mmbiz.qpic.cn/mmbiz_jpg/yVGZpicgicib4l130z0DDDD7uSLl0z2iaicEvZxKAic2UlBXllItyvd5Eibibfp0COY54QtRT3vNdibkeHiaNY5cHbibSzOibQ/0\", \"ThumbMediaId\": \"S64I_hy21v5NqgQ7H_5tFrOlMg9KwvxkLPfYHOsvYRvjivqi7OCFLFWw1KoBGth6\" 客服消息中的图片如何获取（上传到微信服务器保存，微信返回 media_id，需要定期上传有效期 7 天） 上传代码： //上传的部分代码 String accessToken = \"获取的accessToken\" String reqUrl = String.format(url, accessToken); String filePath = \"img/gzh.jpg\"; String data = OkHttpUtils.uploadImage(reqUrl, filePath); JSONObject dataJSON = JSON.parseObject(data); if (Objects.nonNull(dataJSON)) { String mediaId = dataJSON.getString(\"media_id\"); if (StringUtils.isNotBlank(mediaId)) { redisCache.set(\"duancm_gzh_image\", mediaId, 6 * 86400); logger.info(\"临时图片设置成功\"); } } //上传核心代码，将 media_id 存入缓存中 public static String uploadImage(String url, String imagePath) { InputStream resourceAsStream = OkHttpUtils.class.getClassLoader().getResourceAsStream(imagePath); File file = null; try { file = File.createTempFile(\"gzh\", \".jpg\"); if (Objects.nonNull(resourceAsStream)) { FileUtils.copyInputStreamToFile(resourceAsStream, file); } } catch (IOException e) { logger.error(\"获取文件失败,msg:{}\", e.getMessage(), e); } if (Objects.isNull(file)) { logger.error(\"获取文件为空\"); return \"\"; } RequestBody image = RequestBody.create(MediaType.parse(\"image/jpeg\"), file); RequestBody requestBody = new MultipartBody.Builder() .setType(MultipartBody.FORM) .addFormDataPart(\"file\", imagePath, image) .build(); Request request = new Request.Builder() .url(url) .post(requestBody) .build(); try (Response response = commonRequest.newCall(request).execute()) { if (response.isSuccessful() && response.body() != null) { return Objects.requireNonNull(response.body()).string(); } } catch (IOException e) { logger.error(\"OkHttpUtils 上传图片失败，url：{}，msg：{}\", url, e.getMessage(), e); } return \"\"; } 上传图片素材 curl 命令： curl -F media=@图片文件名.jpg \"https://api.weixin.qq.com/cgi-bin/media/upload?access_token=获取的access_token&type=image\"","categories":[],"tags":[{"name":"小程序公众号","slug":"小程序公众号","permalink":"http://www.wzzzzzz.com/tags/小程序公众号/"}]},{"title":"Liunx 相关命令操作","slug":"Liunx-相关命令操作","date":"2019-12-19T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/liunx-xiang-guan-ming-ling-cao-zuo/","link":"","permalink":"http://www.wzzzzzz.com/article/liunx-xiang-guan-ming-ling-cao-zuo/","excerpt":"","text":"Liunx 相关命令操作 # 查看 liunx 中哪个目录日志多 ===》 https://linux.cn/article-9495-1.html du -s /* | sort -nr #方法1 find / -type f -print0 | xargs -0 du -h | sort -rh | head -n 10 #方法2 find / -type f -exec du -Sh {} + | sort -rh | head -n 10 #方法3 find / -type f -print0 | xargs -0 du | sort -n | tail -10 | cut -f2 | xargs -I{} du -sh {} #方法4 find / -type f -ls | sort -k 7 -r -n | head -10 | column -t | awk '{print $7,$11}' # 查看 liunx 整个磁盘使用情况 df -h # 查看 liunx 具体某个目录磁盘使用情况 du -h /xxx # 对一个脚本配置别名 echo \"alias 别名=/usr/local/script/脚本.sh\" >> ~/.bash_profile source ~/.bash_profile # 查看 liunx 端口号 netstat -ntulp #linux系统下单进程的线程数是有上线的，查看命令为 ulimit -u lsof |grep deleted","categories":[],"tags":[{"name":"Liunx 相关命令操作","slug":"Liunx-相关命令操作","permalink":"http://www.wzzzzzz.com/tags/Liunx-相关命令操作/"}]},{"title":"Mybatis-log-helper 设置","slug":"Mybatis-log-helper-设置","date":"2019-12-18T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/mybatis-log-helper-she-zhi/","link":"","permalink":"http://www.wzzzzzz.com/article/mybatis-log-helper-she-zhi/","excerpt":"","text":"Mybatis-log-helper 设置 Springboot 整合 Logback Mybatis-log-helper 不生效 最简单的设置，直接在配置文件中设置 mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl 等价于： 配置文件配置","categories":[],"tags":[{"name":"Mybatis","slug":"Mybatis","permalink":"http://www.wzzzzzz.com/tags/Mybatis/"}]},{"title":"Springboot 重定向","slug":"Springboot-重定向","date":"2019-12-13T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/springboot-chong-ding-xiang/","link":"","permalink":"http://www.wzzzzzz.com/article/springboot-chong-ding-xiang/","excerpt":"","text":"Springboot 重定向短链 编写一个Controller @Controller public class HiController { @GetMapping(\"/hello\") @ResponseBody public String hello() { return \"hello\"; // 直接在页面上返回 hello } @GetMapping(\"/hi\") public String hi() { return \"redirect:https://dwz.cn/ymOMHebr\"; //直接跳转至短链指定的位置 } }","categories":[],"tags":[{"name":"springboot 重定向","slug":"springboot-重定向","permalink":"http://www.wzzzzzz.com/tags/springboot-重定向/"}]},{"title":"Mysql 基础","slug":"Mysql-count-用法","date":"2019-11-13T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/mysql-count-yong-fa/","link":"","permalink":"http://www.wzzzzzz.com/article/mysql-count-yong-fa/","excerpt":"","text":"Mysql 基础 Mysql count 用法 1、COUNT有几种用法？ 2、COUNT(字段名)和COUNT(*)的查询结果有什么不同？ 3、COUNT(1)和COUNT(*)之间有什么不同？ 4、COUNT(1)和COUNT(*)之间的效率哪个更高？ 5、为什么《阿里巴巴Java开发手册》建议使用COUNT(*) 6、MySQL的MyISAM引擎对COUNT(*)做了哪些优化？ 7、MySQL的InnoDB引擎对COUNT(*)做了哪些优化？ 8、上面提到的MySQL对COUNT(*)做的优化，有一个关键的前提是什么？ 9、SELECT COUNT(*) 的时候，加不加where条件有差别吗？ 10、COUNT(*)、COUNT(1)和COUNT(字段名)的执行过程是怎样的？ Mysql 客户端执行SQL文件 #客户端中 source /文件路径/xx.sql 查询两个表之间相同的数据和不同的数据 # 不相同的数据 select * from newgoodscategory A where A.id NOT IN (select B.ID from tb_category B ); # 相同的数据数量 select count(*) from newgoodscategory A where A.id IN (select B.ID from tb_category B ); # 方式2 select * from tb_a A where NOT EXISTS (select 1 from tb_b B where A.ID = B.ID);","categories":[],"tags":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.wzzzzzz.com/tags/Mysql/"}]},{"title":"Mybatis 打印sql执行时间插件","slug":"Mybatis 打印sql执行时间插件","date":"2019-10-19T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/mybatis-da-yin-sql-zhi-xing-shi-jian-cha-jian/","link":"","permalink":"http://www.wzzzzzz.com/article/mybatis-da-yin-sql-zhi-xing-shi-jian-cha-jian/","excerpt":"","text":"Mybatis 打印sql执行时间插件 起因：领导没有配置 mysql 慢 sql，让 diaosi 的我自己想办法。我 mlgb = make life getting better mysql 没有配置慢 sql ，如何查看 sql 执行时间？想了许久后，能不能在 sql 开始执行的时候记录一次时间， sql执行结束时记录一次时间，将两次时间相减就是 sql 执行的时间。 现在的问题只要解决找到 sql 执行的方法，在那记录时间就 OK 了。那么如何找到 sql 执行的方法？mybatis 插件就给我们提供了很好的扩展。 编写 mybatis-sql 拦截插件： //日志记录 @Slf4j @Configuration //需要拦截的方法 @Intercepts({ @Signature(type = StatementHandler.class, method = \"query\", args = {Statement.class, ResultHandler.class}), @Signature(type = StatementHandler.class, method = \"update\", args = {Statement.class}), @Signature(type = StatementHandler.class, method = \"batch\", args = {Statement.class})}) public class SqlCostInterceptor implements Interceptor { @Override public Object intercept(Invocation invocation) throws Throwable { // 以下逻辑是找到对应的 mapper 方法 long startTime = System.currentTimeMillis(); try { return invocation.proceed(); } finally { long endTime = System.currentTimeMillis(); long costTime = endTime - startTime; try { Object target = invocation.getTarget(); if (target instanceof RoutingStatementHandler) { Field delegate = ReflectionUtils.findField(RoutingStatementHandler.class, \"delegate\"); if (Objects.nonNull(delegate)) { delegate.setAccessible(true); Object object = delegate.get(target); if (object instanceof BaseStatementHandler) { Field field = ReflectionUtils.findField(BaseStatementHandler.class, \"mappedStatement\"); if (Objects.nonNull(field)) { field.setAccessible(true); Object data = field.get(object); MappedStatement mappedStatement = (MappedStatement) data; String id = mappedStatement.getId(); log.info(id + \"：执行耗时：{} ms\", costTime); } } } } } catch (Exception e) { log.error(\"打印 sql 执行时间错误，msg：{}\", e.getMessage(), e); } } } @Override public Object plugin(Object target) { return Plugin.wrap(target, this); } @Override public void setProperties(Properties properties) { } } 配置 mybatis 插件（给 SqlSessionFactoryBean 对象设置刚刚编写好的插件） final SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean(); sessionFactory.setDataSource(rdsdataSource); sessionFactory.setMapperLocations( new PathMatchingResourcePatternResolver().getResources(mapperLocation)); sessionFactory.setConfigLocation(new ClassPathResource(configLocation)); sessionFactory.setPlugins(new Interceptor[]{new SqlCostInterceptor()}); 收集刚刚打印的日志信息（收集指定包下面的日志信息） true ${logging.level} ${logging.path}/sql/sql.log ${logging.path}/sql/sql.log.%d{yyyy-MM-dd} 7 %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level - %msg%n UTF-8","categories":[],"tags":[{"name":"Mybatis插件","slug":"Mybatis插件","permalink":"http://www.wzzzzzz.com/tags/Mybatis插件/"}]},{"title":"Nginx 配置跨域","slug":"Nginx-配置跨域","date":"2019-10-18T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/nginx-pei-zhi-kua-yu/","link":"","permalink":"http://www.wzzzzzz.com/article/nginx-pei-zhi-kua-yu/","excerpt":"","text":"Nginx 配置跨域 跨域是什么？","categories":[],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"http://www.wzzzzzz.com/tags/Nginx/"}]},{"title":"Nginx 一个域名配置不同location","slug":"Nginx-一个域名配置不同location","date":"2019-10-16T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/nginx-yi-ge-yu-ming-pei-zhi-bu-tong-location/","link":"","permalink":"http://www.wzzzzzz.com/article/nginx-yi-ge-yu-ming-pei-zhi-bu-tong-location/","excerpt":"","text":"Nginx 一个域名配置多个静态资源路径 域名：www.baidu.com 当我想访问：www.baidu.com 时指向服务器中的 /usr/local 当我想访问：www.baidu.com/hello 时也指向服务器中的 /usr/local location 配置 location / { root /usr/local index index.html index.htm; } location /hello { alias /usr/local/ index index.html index.htm; } root 和 alias 区别 当配置为 root 时，访问 location 后的路径（xx）时会将实际路径变成：路径+xx 当配置为 alias 时，访问 location 后的路径（xx）时会将实际路径变成：路径","categories":[],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"http://www.wzzzzzz.com/tags/Nginx/"}]},{"title":"Nginx proxy_pass细节","slug":"Nginx-proxy_pass细节","date":"2019-10-14T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/nginx-proxy-pass-xi-jie/","link":"","permalink":"http://www.wzzzzzz.com/article/nginx-proxy-pass-xi-jie/","excerpt":"","text":"Nginx proxy_pass细节 server_name www.wzzzzzz.com proxy_pass ​ 既是把请求代理到其他主机，其中 localhost:8080/ 写法和 localhost:8080写法的区别如下: 不带/ `location /html/``{`` proxy_pass http:``//b.com:8300; ``}` 带/ `location /html/ ``{ `` ``proxy_pass http:``//b.com:8300/; ``}` 上面两种配置，区别只在于 proxy_pass 转发的路径后是否带 “/”。 针对情况1，如果访问url = http://www.wzzzzzz.com/html，则被nginx代理后，请求路径会便问 http://localhost:8080/html，将/html/ 作为根路径，请求/html/路径下的资源。 针对情况2，如果访问url = http://www.wzzzzzz.com/html，则被nginx代理后，请求路径会变为 http://localhost:8080，直接访问server的根资源。 简单的可以这样理解： ​ 不带 / 会将 location 后的路径拼接到代理地址的后面 ​ 带 / 不会将 location 后的路径拼接到代理地址的后面 https://my.oschina.net/foreverich/blog/1512304","categories":[],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"http://www.wzzzzzz.com/tags/Nginx/"}]},{"title":"Linux安装 node 环境","slug":"Linux安装-node-环境","date":"2019-10-09T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/linux-an-zhuang-node-huan-jing/","link":"","permalink":"http://www.wzzzzzz.com/article/linux-an-zhuang-node-huan-jing/","excerpt":"","text":"Linux安装 node 环境 官网下载 wget -c https://nodejs.org/dist/v10.16.3/node-v10.16.3-linux-x64.tar.xz 解压 tar -xvf node-v10.16.3-linux-x64.tar.xz 建立软链接 sudo ln -s 安装目录/bin/node /usr/local/bin/node` sudo ln -s 安装目录/bin/npm /usr/local/bin/npm 安装cnpm npm install -g cnpm --registry=https://registry.npm.taobao.org 参考","categories":[],"tags":[{"name":"node","slug":"node","permalink":"http://www.wzzzzzz.com/tags/node/"}]},{"title":"node 和 npm 的区别","slug":"node-和-npm-的区别","date":"2019-10-08T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/node-he-npm-de-qu-bie/","link":"","permalink":"http://www.wzzzzzz.com/article/node-he-npm-de-qu-bie/","excerpt":"","text":"Node 和 Npm 的区别 Node: ​ js 代码运行环境（node.js是javascript的一种运行环境，是一个服务器端的javascript的解释器。） npm： ​ node package manage ，(node 的包管理工具) 可以安装别人已经开发好的 js 代码","categories":[],"tags":[{"name":"Node","slug":"Node","permalink":"http://www.wzzzzzz.com/tags/Node/"},{"name":"Npm","slug":"Npm","permalink":"http://www.wzzzzzz.com/tags/Npm/"}]},{"title":"使用构建器代替多个构造器参数","slug":"使用构建器代替多个构造器参数","date":"2019-07-28T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/shi-yong-gou-jian-qi-dai-ti-duo-ge-gou-zao-qi-can-shu/","link":"","permalink":"http://www.wzzzzzz.com/article/shi-yong-gou-jian-qi-dai-ti-duo-ge-gou-zao-qi-can-shu/","excerpt":"","text":"使用构建器代替多个构造器参数 实例代码 public class Student { //全局变量，有静态内部类的方法赋值 private final String name; private final Integer age; private final String phone; public static class Builder { private String name; private Integer age; private String phone; //给外部类赋值的方法 public Builder name(String val) { name = val; return this; } public Builder age(Integer val) { age = val; return this; } public Builder phone(String val) { phone = val; return this; } //静态内部类的构造器，用于创建外部类的对象 public Student build() { //调用外面类的私有构造器 return new Student(this); } } //外部类的私有构造器 private Student(Builder builder) { name = builder.name; age = builder.age; phone = builder.phone; } }","categories":[],"tags":[{"name":"Java基础","slug":"Java基础","permalink":"http://www.wzzzzzz.com/tags/Java基础/"}]},{"title":"Centos7 上安装Nginx —— 压缩包的方式","slug":"Centos7 上安装Nginx","date":"2019-07-27T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/centos7-shang-an-zhuang-nginx/","link":"","permalink":"http://www.wzzzzzz.com/article/centos7-shang-an-zhuang-nginx/","excerpt":"","text":"Centos7 上安装Nginx —— 压缩包的方式 打开官网 https://nginx.org/en/ 不收费的以 .org 的结尾 找到对应的版本 使用下载命令 wget https://nginx.org/download/nginx-1.14.2.tar.gz 使用解压命令 tar -zxvf nginx-1.14.2.tar.gz 安装gcc （c 环境） yum install -y gcc-c++ PCRE pcre-devel 安装 yum install -y pcre pcre-devel zlib 安装 yum install -y zlib zlib-devel OpenSSL 安装 yum install -y openssl openssl-devel 进入解压目录 ./configure --prefix=[自己指定的安装目录] && make install 配置环境变量 echo 'export PATH=$PATH:home/software/install_package/nginx_ins/sbin' > /etc/profile.d/nginx.sh 环境变量生效 source /etc/profile 查看是否生效 whereis nginx 启动Nginx nginx 输入自己的主机IP地址，出现","categories":[],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"http://www.wzzzzzz.com/tags/Nginx/"}]},{"title":"换了电脑如何写 Hexo 博客","slug":"博客-换了电脑如何写-Hexo-博客","date":"2019-07-24T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/bo-ke-huan-liao-dian-nao-ru-he-xie-hexo-bo-ke/","link":"","permalink":"http://www.wzzzzzz.com/article/bo-ke-huan-liao-dian-nao-ru-he-xie-hexo-bo-ke/","excerpt":"","text":"换了电脑如何写 Hexo 博客？ 拷贝文件目录 _config.yml package.json scaffolds/ source/ themes/ 在你的新电脑上首先配置hexo环境：安装Node.js 安装hexo，执行命令： npm install -g hexo 安装好之后，进入hexo／目录 模块安装，执行命令： npm install npm install hexo-deployer-git --save npm install hexo-generator-feed --save npm install hexo-generator-sitemap --save 部署，执行命令 hexo g hexo deploy","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://www.wzzzzzz.com/tags/Hexo/"}]},{"title":"mac 相关操作","slug":"Mac-相关操作","date":"2019-07-13T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/mac-xiang-guan-cao-zuo/","link":"","permalink":"http://www.wzzzzzz.com/article/mac-xiang-guan-cao-zuo/","excerpt":"","text":"mac 相关操作 1.如何从liunx上下载软件到mac上 使用shell命令 tiaozao@192.168.1.1 -> liunx用户名@liunx服务器地址 /data/wwwroot/default/111.png -> 服务器上的文件路径 /Users/mac_pc/Desktop -> 本地mac上的路径 scp tiaozao@192.168.1.1:/data/tiaozao/default/111.png /Users/mac_pc/Desktop 传输文件夹 sup -r root@192.168.1.1:/data/wwwroot/default/test /Users/mac_pc/Desktop 2.mac 中如何在终端打开对应的文件夹目录 在终端的某个目录下使用 open .","categories":[],"tags":[{"name":"mac","slug":"mac","permalink":"http://www.wzzzzzz.com/tags/mac/"}]},{"title":"Centos7 安装 git 压缩包","slug":"Centos7 安装 git 压缩包","date":"2019-05-13T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/centos7-an-zhuang-git-ya-suo-bao/","link":"","permalink":"http://www.wzzzzzz.com/article/centos7-an-zhuang-git-ya-suo-bao/","excerpt":"","text":"Centos7 安装 git 压缩包 1.下载 git 压缩包并解压 git 相关资源 https://mirrors.edge.kernel.org/pub/software/scm/git/ 使用命令下载压缩包： wget https://www.kernel.org/pub/software/scm/git/git-2.7.3.tar.gz 使用命令解压压缩包： tar -zxvf git-2.7.3.tar.gz 进入解压后的目录 cd git-2.7.3 2.安装相关依赖 yum -y install gcc openssl openssl-devel curl curl-devel unzip perl perl-devel expat expat-devel zlib zlib-devel asciidoc xmlto gettext-devel openssh-clients 3.编译 make /usr/local/software/git/install/ install /usr/local/software/git/install/ ：为编译的目录；install：命令 4.配置全局命令 export PATH=\"/usr/local/software/git/bin:$PATH\" source /etc/profile","categories":[],"tags":[{"name":"安装","slug":"安装","permalink":"http://www.wzzzzzz.com/tags/安装/"}]},{"title":"Java 设计模式——七大原则","slug":"Java-设计模式——七大原则","date":"2019-05-04T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/java-she-ji-mo-shi-qi-da-yuan-ze/","link":"","permalink":"http://www.wzzzzzz.com/article/java-she-ji-mo-shi-qi-da-yuan-ze/","excerpt":"","text":"Java 设计模式——七大原则 1.单一职责原则 ​ 例子：Mybatis 整合 Spring 各种 XXXMapper 只操作相应的数据库表 ​ class 类级别的单一原则 ​ 不同的业务，不同的业务类 ​ method 方法级别的单一原则 ​ 同一个类中，不同的业务方法（例如工具类，中不同的方法） 2.接口隔离原则 ​ 客户端不应该依赖它不需要的接口，即一个类对对另外一个类的依赖应该建立在最小的接口上。 ​ 例如：类A 3.依赖倒转原则 4.里式替换原则 5.开闭原则 6.迪米特法则 7.合成复用原则","categories":[],"tags":[{"name":"设计模式","slug":"设计模式","permalink":"http://www.wzzzzzz.com/tags/设计模式/"}]},{"title":"SpingBoot 配置 Swagger2","slug":"SpingBoot-配置-Swagger2","date":"2019-05-04T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/spingboot-pei-zhi-swagger2/","link":"","permalink":"http://www.wzzzzzz.com/article/spingboot-pei-zhi-swagger2/","excerpt":"","text":"SpingBoot 配置 Swagger2 先创建 Swagger 配置类，将 Swagger 交给 Spring ioc 管理","categories":[],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://www.wzzzzzz.com/tags/SpringBoot/"}]},{"title":"配置连接服务器的脚本","slug":"配置连接服务器的脚本","date":"2019-05-04T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/pei-zhi-lian-jie-fu-wu-qi-de-jiao-ben/","link":"","permalink":"http://www.wzzzzzz.com/article/pei-zhi-lian-jie-fu-wu-qi-de-jiao-ben/","excerpt":"","text":"配置连接服务器的脚本 配置脚本： #!/usr/bin/expect set timeout 3 spawn ssh root@IP地址 expect \"*password*\" send \"密码\\r\" interact 配置脚本别名： echo \"alias 别名=/脚本路径/xxx.sh\" >> ~/.bash_profile","categories":[],"tags":[{"name":"脚本","slug":"脚本","permalink":"http://www.wzzzzzz.com/tags/脚本/"}]},{"title":" Mysql 驱动版本错误","slug":"Mysql-驱动版本错误","date":"2019-05-03T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/mysql-qu-dong-ban-ben-cuo-wu/","link":"","permalink":"http://www.wzzzzzz.com/article/mysql-qu-dong-ban-ben-cuo-wu/","excerpt":"","text":"Mysql 驱动版本错误 报错： com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: Could not create connection to database server. at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) ~[na:1.8.0_201] at java.lang.reflect.Constructor.newInstance(Constructor.java:423) ~[na:1.8.0_201] at com.mysql.jdbc.Util.handleNewInstance(Util.java:377) ~[mysql-connector-java-5.1.33.jar:5.1.33] at com.mysql.jdbc.Util.getInstance(Util.java:360) ~[mysql-connector-java-5.1.33.jar:5.1.33] at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:956) ~[mysql-connector-java-5.1.33.jar:5.1.33] at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:935) ~[mysql-connector-java-5.1.33.jar:5.1.33] at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:924) ~[mysql-connector-java-5.1.33.jar:5.1.33] at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:870) ~[mysql-connector-java-5.1.33.jar:5.1.33] at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2311) ~[mysql-connector-java-5.1.33.jar:5.1.33] at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2064) ~[mysql-connector-java-5.1.33.jar:5.1.33] at com.mysql.jdbc.ConnectionImpl.(ConnectionImpl.java:790) ~[mysql-connector-java-5.1.33.jar:5.1.33] at com.mysql.jdbc.JDBC4Connection.(JDBC4Connection.java:44) ~[mysql-connector-java-5.1.33.jar:5.1.33] at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) ~[na:1.8.0_201] at java.lang.reflect.Constructor.newInstance(Constructor.java:423) ~[na:1.8.0_201] at com.mysql.jdbc.Util.handleNewInstance(Util.java:377) ~[mysql-connector-java-5.1.33.jar:5.1.33] at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:395) ~[mysql-connector-java-5.1.33.jar:5.1.33] at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:325) ~[mysql-connector-java-5.1.33.jar:5.1.33] at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:117) ~[HikariCP-2.7.8.jar:na] at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:123) ~[HikariCP-2.7.8.jar:na] at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:365) ~[HikariCP-2.7.8.jar:na] at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:194) ~[HikariCP-2.7.8.jar:na] at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:460) [HikariCP-2.7.8.jar:na] at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:534) [HikariCP-2.7.8.jar:na] at com.zaxxer.hikari.pool.HikariPool.(HikariPool.java:115) [HikariCP-2.7.8.jar:na] at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112) [HikariCP-2.7.8.jar:na] at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:151) [spring-jdbc-5.0.5.RELEASE.jar:5.0.5.RELEASE] at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:115) [spring-jdbc-5.0.5.RELEASE.jar:5.0.5.RELEASE] at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:78) [spring-jdbc-5.0.5.RELEASE.jar:5.0.5.RELEASE] at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:82) [mybatis-spring-1.3.2.jar:1.3.2] at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:68) [mybatis-spring-1.3.2.jar:1.3.2] at org.apache.ibatis.executor.BaseExecutor.getConnection(BaseExecutor.java:338) [mybatis-3.4.6.jar:3.4.6] at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:84) [mybatis-3.4.6.jar:3.4.6] at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:62) [mybatis-3.4.6.jar:3.4.6] at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:326) [mybatis-3.4.6.jar:3.4.6] at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156) [mybatis-3.4.6.jar:3.4.6] at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109) [mybatis-3.4.6.jar:3.4.6] at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83) [mybatis-3.4.6.jar:3.4.6] at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148) [mybatis-3.4.6.jar:3.4.6] at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141) [mybatis-3.4.6.jar:3.4.6] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433) [mybatis-spring-1.3.2.jar:1.3.2] at com.sun.proxy.$Proxy71.selectList(Unknown Source) [na:na] at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:230) [mybatis-spring-1.3.2.jar:1.3.2] at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:139) [mybatis-3.4.6.jar:3.4.6] at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:76) [mybatis-3.4.6.jar:3.4.6] at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59) [mybatis-3.4.6.jar:3.4.6] at com.sun.proxy.$Proxy72.selectByExample(Unknown Source) [na:na] at com.tiaozao.bigpig.douyin.dyuser.dao.impl.DyuserDaoImpl.queryDyuser(DyuserDaoImpl.java:21) [classes/:na] at com.tiaozao.bigpig.douyin.dyuser.DyuserMapperTest.queryDyuserTest(DyuserMapperTest.java:25) [test-classes/:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) [junit-4.12.jar:4.12] at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) [junit-4.12.jar:4.12] at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) [junit-4.12.jar:4.12] at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) [junit-4.12.jar:4.12] at org.springframework.test.context.junit4.statements.RunBeforeTestExecutionCallbacks.evaluate(RunBeforeTestExecutionCallbacks.java:73) [spring-test-5.0.5.RELEASE.jar:5.0.5.RELEASE] at org.springframework.test.context.junit4.statements.RunAfterTestExecutionCallbacks.evaluate(RunAfterTestExecutionCallbacks.java:83) [spring-test-5.0.5.RELEASE.jar:5.0.5.RELEASE] at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75) [spring-test-5.0.5.RELEASE.jar:5.0.5.RELEASE] at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86) [spring-test-5.0.5.RELEASE.jar:5.0.5.RELEASE] at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84) [spring-test-5.0.5.RELEASE.jar:5.0.5.RELEASE] at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) [junit-4.12.jar:4.12] at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:251) [spring-test-5.0.5.RELEASE.jar:5.0.5.RELEASE] at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97) [spring-test-5.0.5.RELEASE.jar:5.0.5.RELEASE] at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) [junit-4.12.jar:4.12] at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) [junit-4.12.jar:4.12] at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) [junit-4.12.jar:4.12] at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) [junit-4.12.jar:4.12] at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) [junit-4.12.jar:4.12] at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61) [spring-test-5.0.5.RELEASE.jar:5.0.5.RELEASE] at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70) [spring-test-5.0.5.RELEASE.jar:5.0.5.RELEASE] at org.junit.runners.ParentRunner.run(ParentRunner.java:363) [junit-4.12.jar:4.12] at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190) [spring-test-5.0.5.RELEASE.jar:5.0.5.RELEASE] at org.junit.runner.JUnitCore.run(JUnitCore.java:137) [junit-4.12.jar:4.12] at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68) [junit-rt.jar:na] at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47) [junit-rt.jar:na] at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242) [junit-rt.jar:na] at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70) [junit-rt.jar:na] Caused by: java.lang.NullPointerException: null at com.mysql.jdbc.ConnectionImpl.getServerCharset(ConnectionImpl.java:2983) ~[mysql-connector-java-5.1.33.jar:5.1.33] at com.mysql.jdbc.MysqlIO.sendConnectionAttributes(MysqlIO.java:1873) ~[mysql-connector-java-5.1.33.jar:5.1.33] at com.mysql.jdbc.MysqlIO.proceedHandshakeWithPluggableAuthentication(MysqlIO.java:1802) ~[mysql-connector-java-5.1.33.jar:5.1.33] at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1206) ~[mysql-connector-java-5.1.33.jar:5.1.33] at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2234) ~[mysql-connector-java-5.1.33.jar:5.1.33] at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2265) ~[mysql-connector-java-5.1.33.jar:5.1.33] ... 75 common frames omitted 原因： mysql 数据库是8.0+的版本，数据库驱动是5.0+，驱动不能创建连接 解决： 将mysql 连接版本改为8.0+","categories":[],"tags":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.wzzzzzz.com/tags/Mysql/"}]},{"title":"Spingboot 多模块单元测试","slug":"Spingboot-多模块单元测试","date":"2019-05-03T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/spingboot-duo-mo-kuai-dan-yuan-ce-shi/","link":"","permalink":"http://www.wzzzzzz.com/article/spingboot-duo-mo-kuai-dan-yuan-ce-shi/","excerpt":"","text":"Spingboot 多模块单元测试 Dao 模块下的单元测试： Tips： 如果主启动类和测试类在同一个包下，则无需在 @SpringBootTest 的 classes = 无需指定 如果主启动类和测试类不在同一个包下，则需在 @SpringBootTest(classes = BigpigApplication.class) 指定主启动类 如下图所示：","categories":[],"tags":[{"name":"spingboot","slug":"spingboot","permalink":"http://www.wzzzzzz.com/tags/spingboot/"}]},{"title":" 解决org.apache.ibatis.binding.BindingException: Invalid bound statement (not found)问题","slug":"解决org.apache.ibatis.binding.BindingException-Invalid-bound-statement-(not-found)问题","date":"2019-05-03T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/jie-jue-org.apache.ibatis.binding.bindingexception-invalid-bound-statement-not-found-wen-ti/","link":"","permalink":"http://www.wzzzzzz.com/article/jie-jue-org.apache.ibatis.binding.bindingexception-invalid-bound-statement-not-found-wen-ti/","excerpt":"","text":"解决org.apache.ibatis.binding.BindingException: Invalid bound statement (not found)问题 1.出现该问题的原因一 mapper.xml 中的命名空间与 mapper 接口未能对应上 2.必须配置mapper.xml的位置 不然相当于 mapper 接口找不到实现类","categories":[],"tags":[{"name":"Mybatis","slug":"Mybatis","permalink":"http://www.wzzzzzz.com/tags/Mybatis/"}]},{"title":" Maven 多模块中子模块如何使用父模块的依赖","slug":"Maven 多模块中子模块如何使用父模块的依赖","date":"2019-04-26T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/maven-duo-mo-kuai-zhong-zi-mo-kuai-ru-he-shi-yong-fu-mo-kuai-de-yi-lai/","link":"","permalink":"http://www.wzzzzzz.com/article/maven-duo-mo-kuai-zhong-zi-mo-kuai-ru-he-shi-yong-fu-mo-kuai-de-yi-lai/","excerpt":"","text":"Maven 多模块中子模块如何使用父模块的依赖 如果父模块使用的是： 则子模块自动拥有父模块对应的依赖（jar包） 如果父模块使用的是： 则子模块不会自动拥有父模块对应的依赖（jar包），若需要拥有对应的依赖，则需要在子模块中添加 xxx xxxxxx 无需添加对应的版本，因为版本已经交给父模块管理，若想与父模块使用不同的版本，则添加对应的版本 xxx xxxxxx 1.6.1","categories":[],"tags":[{"name":"Maven","slug":"Maven","permalink":"http://www.wzzzzzz.com/tags/Maven/"}]},{"title":"[Hexo] Theme tiaozao","slug":"tiaozao-theme","date":"2019-01-01T02:51:24.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/tiaozao-theme/","link":"","permalink":"http://www.wzzzzzz.com/article/tiaozao-theme/","excerpt":"","text":"This TIAOZAO theme created by TiaoZao modified from the original Porter YuHsuan Live Demo TiaoZao Blog : www.wzzzzzz.com Install Hexo Install Node.js and Git #For Mac brew install node brew install git Install hexo npm install hexo-cli -g #For more:https://hexo.io/zh-cn/index.html Theme Usage Init git clone https://github.com/huweihuang/hexo-theme-huweihuang.git ./hexo-huweihuang cd hexo-huweihuang npm install Modify Modify _config.yml file with your own info. Especially the section: Deployment Replace to your own repo! deploy: type: git repo: https://github.com// branch: Sidebar settings Copy your avatar image to &lt;root&gt;/img/ and modify the _config.yml: sidebar: true # whether or not using Sidebar. sidebar-about-description: \"\" sidebar-avatar: img/ and activate your personal widget you like widgets: # here are widget you can use, you can comment out - featured-tags - short-about - recent-posts - friends-blog - archive - category if you want to add sidebar widget, please add at layout/_widget. Signature Setup Copy your signature image to &lt;root&gt;/img/signature and modify the _config.yml: signature: true # show signature signature-img: img/signature/ Go to top icon Setup My icon is using iron man, you can change to your own icon at css/image. Post tag You can decide to show post tags or not. home_posts_tag: true Markdown render My markdown render engine plugin is hexo-renderer-markdown-it. # Markdown-it config ## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki markdown: render: html: true xhtmlOut: false breaks: true linkify: true typographer: true quotes: '“”‘’' and if you want to change the header anchor ‘ℬ’, you can go to layout/post.ejs to change it. async(\"https://cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js\",function(){ anchors.options = { visible: 'hover', placement: 'left', icon: ℬ // this is the header anchor \"unicode\" icon }; Hexo Basics Some hexo command: hexo new post \"\" # you can change post to another layout if you want hexo clean && hexo generate # generate the static file hexo server # run hexo in local environment hexo deploy # hexo will push the static files automatically into the specific branch(gh-pages) of your repo! Have fun ^_^ Please Star this Project if you like it! Follow would also be appreciated! Peace!","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://www.wzzzzzz.com/tags/Hexo/"}]},{"title":"Mysql Explain执行计划","slug":"Mysql-Explain执行计划","date":"2012-05-22T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/mysql-explain-zhi-xing-ji-hua/","link":"","permalink":"http://www.wzzzzzz.com/article/mysql-explain-zhi-xing-ji-hua/","excerpt":"","text":"Mysql Explain执行计划","categories":[],"tags":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.wzzzzzz.com/tags/Mysql/"}]},{"title":"Mysql 回表","slug":"Mysql-回表","date":"2012-05-22T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/mysql-hui-biao/","link":"","permalink":"http://www.wzzzzzz.com/article/mysql-hui-biao/","excerpt":"","text":"Mysql 回表 MySQL优化：如何避免回表查询？什么是索引覆盖？ 什么是回表查询？ 什么是索引覆盖？ 如何实现索引覆盖？ 常见的方法是：将被查询的字段，建立到联合索引里去。","categories":[],"tags":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.wzzzzzz.com/tags/Mysql/"}]},{"title":"Mysql 内置函数","slug":"Mysql-内置函数","date":"2012-05-20T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/mysql-nei-zhi-han-shu/","link":"","permalink":"http://www.wzzzzzz.com/article/mysql-nei-zhi-han-shu/","excerpt":"","text":"Mysql 内置函数 # 查看当前 mysql 有多少客户端连接 show PROCESSLIST # 查看当前数据库所有表的状态 show table status SHOW TABLE STATUS [{FROM | IN} db_name] [LIKE 'pattern' | WHERE expr] #当表的平均长度不同时，平均长度短的查询快（相同数据量的情况下）","categories":[],"tags":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.wzzzzzz.com/tags/Mysql/"}]},{"title":"Mysql 执行sql文件","slug":"Mysql-执行sql文件","date":"2012-05-20T16:00:00.000Z","updated":"2020-11-07T16:32:53.000Z","comments":true,"path":"article/mysql-zhi-xing-sql-wen-jian/","link":"","permalink":"http://www.wzzzzzz.com/article/mysql-zhi-xing-sql-wen-jian/","excerpt":"","text":"Mysql 执行sql文件 #常用source 命令 #进入mysql数据库控制台，如 mysql -u root -p mysql>use 数据库名称 #然后使用source命令，后面参数为脚本文件(如这里用到的.sql) mysql>source 路径加/dbname.sql","categories":[],"tags":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.wzzzzzz.com/tags/Mysql/"}]}],"categories":[{"name":"docker","slug":"docker","permalink":"http://www.wzzzzzz.com/categories/docker/"},{"name":"Sublime","slug":"Sublime","permalink":"http://www.wzzzzzz.com/categories/Sublime/"},{"name":"锁","slug":"锁","permalink":"http://www.wzzzzzz.com/categories/锁/"},{"name":"Springboot","slug":"Springboot","permalink":"http://www.wzzzzzz.com/categories/Springboot/"},{"name":"knife4j","slug":"Springboot/knife4j","permalink":"http://www.wzzzzzz.com/categories/Springboot/knife4j/"},{"name":"抓包","slug":"抓包","permalink":"http://www.wzzzzzz.com/categories/抓包/"},{"name":"代理","slug":"抓包/代理","permalink":"http://www.wzzzzzz.com/categories/抓包/代理/"},{"name":"源码","slug":"源码","permalink":"http://www.wzzzzzz.com/categories/源码/"},{"name":"Mybatis","slug":"源码/Mybatis","permalink":"http://www.wzzzzzz.com/categories/源码/Mybatis/"},{"name":"Spring","slug":"源码/Spring","permalink":"http://www.wzzzzzz.com/categories/源码/Spring/"},{"name":"Java基础","slug":"Java基础","permalink":"http://www.wzzzzzz.com/categories/Java基础/"},{"name":"iterm2","slug":"iterm2","permalink":"http://www.wzzzzzz.com/categories/iterm2/"},{"name":"Mac","slug":"iterm2/Mac","permalink":"http://www.wzzzzzz.com/categories/iterm2/Mac/"},{"name":"Mybatis","slug":"Mybatis","permalink":"http://www.wzzzzzz.com/categories/Mybatis/"},{"name":"Spring","slug":"Spring","permalink":"http://www.wzzzzzz.com/categories/Spring/"},{"name":"Mysql","slug":"Mysql","permalink":"http://www.wzzzzzz.com/categories/Mysql/"},{"name":"操作系统","slug":"操作系统","permalink":"http://www.wzzzzzz.com/categories/操作系统/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://www.wzzzzzz.com/tags/docker/"},{"name":"Sublime","slug":"Sublime","permalink":"http://www.wzzzzzz.com/tags/Sublime/"},{"name":"并发","slug":"并发","permalink":"http://www.wzzzzzz.com/tags/并发/"},{"name":"多线程","slug":"多线程","permalink":"http://www.wzzzzzz.com/tags/多线程/"},{"name":"接口文档","slug":"接口文档","permalink":"http://www.wzzzzzz.com/tags/接口文档/"},{"name":"代理","slug":"代理","permalink":"http://www.wzzzzzz.com/tags/代理/"},{"name":"Mybatis","slug":"Mybatis","permalink":"http://www.wzzzzzz.com/tags/Mybatis/"},{"name":"Spring","slug":"Spring","permalink":"http://www.wzzzzzz.com/tags/Spring/"},{"name":"oh-my-zsh","slug":"oh-my-zsh","permalink":"http://www.wzzzzzz.com/tags/oh-my-zsh/"},{"name":"源码","slug":"源码","permalink":"http://www.wzzzzzz.com/tags/源码/"},{"name":"SpringMVC","slug":"SpringMVC","permalink":"http://www.wzzzzzz.com/tags/SpringMVC/"},{"name":"Mysql","slug":"Mysql","permalink":"http://www.wzzzzzz.com/tags/Mysql/"},{"name":"进程","slug":"进程","permalink":"http://www.wzzzzzz.com/tags/进程/"},{"name":"线程","slug":"线程","permalink":"http://www.wzzzzzz.com/tags/线程/"},{"name":"数组","slug":"数组","permalink":"http://www.wzzzzzz.com/tags/数组/"},{"name":"基本数据类型","slug":"基本数据类型","permalink":"http://www.wzzzzzz.com/tags/基本数据类型/"},{"name":"集合","slug":"集合","permalink":"http://www.wzzzzzz.com/tags/集合/"},{"name":"Git","slug":"Git","permalink":"http://www.wzzzzzz.com/tags/Git/"},{"name":"Redis","slug":"Redis","permalink":"http://www.wzzzzzz.com/tags/Redis/"},{"name":"缓存","slug":"缓存","permalink":"http://www.wzzzzzz.com/tags/缓存/"},{"name":"前端","slug":"前端","permalink":"http://www.wzzzzzz.com/tags/前端/"},{"name":"坑","slug":"坑","permalink":"http://www.wzzzzzz.com/tags/坑/"},{"name":"Springboot","slug":"Springboot","permalink":"http://www.wzzzzzz.com/tags/Springboot/"},{"name":"Neo4j","slug":"Neo4j","permalink":"http://www.wzzzzzz.com/tags/Neo4j/"},{"name":"图数据库","slug":"图数据库","permalink":"http://www.wzzzzzz.com/tags/图数据库/"},{"name":"wrk","slug":"wrk","permalink":"http://www.wzzzzzz.com/tags/wrk/"},{"name":"工具","slug":"工具","permalink":"http://www.wzzzzzz.com/tags/工具/"},{"name":"Hexo","slug":"Hexo","permalink":"http://www.wzzzzzz.com/tags/Hexo/"},{"name":"Go","slug":"Go","permalink":"http://www.wzzzzzz.com/tags/Go/"},{"name":"Gin","slug":"Gin","permalink":"http://www.wzzzzzz.com/tags/Gin/"},{"name":"mac","slug":"mac","permalink":"http://www.wzzzzzz.com/tags/mac/"},{"name":"Liunx 相关命令操作","slug":"Liunx-相关命令操作","permalink":"http://www.wzzzzzz.com/tags/Liunx-相关命令操作/"},{"name":"Nuxt","slug":"Nuxt","permalink":"http://www.wzzzzzz.com/tags/Nuxt/"},{"name":"axios","slug":"axios","permalink":"http://www.wzzzzzz.com/tags/axios/"},{"name":"Node","slug":"Node","permalink":"http://www.wzzzzzz.com/tags/Node/"},{"name":"Npm","slug":"Npm","permalink":"http://www.wzzzzzz.com/tags/Npm/"},{"name":"工作","slug":"工作","permalink":"http://www.wzzzzzz.com/tags/工作/"},{"name":"语言","slug":"语言","permalink":"http://www.wzzzzzz.com/tags/语言/"},{"name":"SpringCloud2.0","slug":"SpringCloud2-0","permalink":"http://www.wzzzzzz.com/tags/SpringCloud2-0/"},{"name":"环境","slug":"环境","permalink":"http://www.wzzzzzz.com/tags/环境/"},{"name":"jdk","slug":"jdk","permalink":"http://www.wzzzzzz.com/tags/jdk/"},{"name":"微信运营","slug":"微信运营","permalink":"http://www.wzzzzzz.com/tags/微信运营/"},{"name":"SpringCloud","slug":"SpringCloud","permalink":"http://www.wzzzzzz.com/tags/SpringCloud/"},{"name":"Config","slug":"Config","permalink":"http://www.wzzzzzz.com/tags/Config/"},{"name":"Zuul","slug":"Zuul","permalink":"http://www.wzzzzzz.com/tags/Zuul/"},{"name":"Hystrix","slug":"Hystrix","permalink":"http://www.wzzzzzz.com/tags/Hystrix/"},{"name":"环境搭建","slug":"环境搭建","permalink":"http://www.wzzzzzz.com/tags/环境搭建/"},{"name":"Nexus使用","slug":"Nexus使用","permalink":"http://www.wzzzzzz.com/tags/Nexus使用/"},{"name":"Vue脚手架","slug":"Vue脚手架","permalink":"http://www.wzzzzzz.com/tags/Vue脚手架/"},{"name":"配置","slug":"配置","permalink":"http://www.wzzzzzz.com/tags/配置/"},{"name":"效率","slug":"效率","permalink":"http://www.wzzzzzz.com/tags/效率/"},{"name":"抓包","slug":"抓包","permalink":"http://www.wzzzzzz.com/tags/抓包/"},{"name":"脚本","slug":"脚本","permalink":"http://www.wzzzzzz.com/tags/脚本/"},{"name":"插件","slug":"插件","permalink":"http://www.wzzzzzz.com/tags/插件/"},{"name":"redis安装","slug":"redis安装","permalink":"http://www.wzzzzzz.com/tags/redis安装/"},{"name":"名词解释","slug":"名词解释","permalink":"http://www.wzzzzzz.com/tags/名词解释/"},{"name":"专业名词","slug":"专业名词","permalink":"http://www.wzzzzzz.com/tags/专业名词/"},{"name":"爬虫","slug":"爬虫","permalink":"http://www.wzzzzzz.com/tags/爬虫/"},{"name":"小程序公众号","slug":"小程序公众号","permalink":"http://www.wzzzzzz.com/tags/小程序公众号/"},{"name":"springboot 重定向","slug":"springboot-重定向","permalink":"http://www.wzzzzzz.com/tags/springboot-重定向/"},{"name":"Mybatis插件","slug":"Mybatis插件","permalink":"http://www.wzzzzzz.com/tags/Mybatis插件/"},{"name":"Nginx","slug":"Nginx","permalink":"http://www.wzzzzzz.com/tags/Nginx/"},{"name":"node","slug":"node","permalink":"http://www.wzzzzzz.com/tags/node/"},{"name":"Java基础","slug":"Java基础","permalink":"http://www.wzzzzzz.com/tags/Java基础/"},{"name":"安装","slug":"安装","permalink":"http://www.wzzzzzz.com/tags/安装/"},{"name":"设计模式","slug":"设计模式","permalink":"http://www.wzzzzzz.com/tags/设计模式/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://www.wzzzzzz.com/tags/SpringBoot/"},{"name":"spingboot","slug":"spingboot","permalink":"http://www.wzzzzzz.com/tags/spingboot/"},{"name":"Maven","slug":"Maven","permalink":"http://www.wzzzzzz.com/tags/Maven/"}]}